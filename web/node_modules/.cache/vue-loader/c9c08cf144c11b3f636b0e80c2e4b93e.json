{"remainingRequest":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\views\\pages\\ListChartItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\views\\pages\\ListChartItem.vue","mtime":1579853107824},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1579332188909},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1579332241739}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport * as Highcharts from \"highcharts\";\r\nimport service from \"@/service/service\";\r\n\r\nimport io from \"socket.io-client\";\r\nvar socket = io.connect(\"http://localhost:3000\");\r\nexport default {\r\n  props: {\r\n    index: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data: function() {\r\n    return {\r\n      i: 0,\r\n      width: 500,\r\n      height: 400,\r\n      x: 0,\r\n      y: 300,\r\n      title: this.$store.state.list_charts[this.index].chart_title,\r\n      rerendercomponent: true,\r\n      resize: false,\r\n      chartOptions: {}\r\n    };\r\n  },\r\n  computed: {\r\n    styles() {\r\n      return {\r\n        card1: {\r\n          height: this.height + \"px\"\r\n        }\r\n      };\r\n    },\r\n    charts() {\r\n      return this.$store.state.list_charts[this.index];\r\n    }\r\n  },\r\n  beforeMount(){\r\n    var chart=this.$store.state.list_charts[this.index];\r\n    this.width=chart.width;\r\n    this.height=chart.height;\r\n  },\r\n  async created() {\r\n    var optionResponse = await service.postData(\"/dashboard/getchart_option\", {\r\n      chart_type_id: this.charts.chart_type_id,\r\n      chart_name: this.charts.chart_name,\r\n      series: this.charts.series,\r\n      height: this.charts.height\r\n    });\r\n    this.chartOptions = optionResponse.chartOption;\r\n    this.charts.series.forEach((item,index)=>{\r\n      socket.on('add'+item.device_id, fetchedData => {\r\n        console.log(fetchedData);\r\n        this.chartOptions.series[index].data.push([fetchedData.date,fetchedData[item.column_name]])\r\n      })\r\n      console.log(item);\r\n    })\r\n  },\r\n  mounted() {\r\n    this.rerendercomponent=false;\r\n    // this.chartOptions.height=this.charts.height;\r\n    this.$nextTick(() => {\r\n        this.rerendercomponent = true;\r\n      });\r\n\r\n  },\r\n  methods: {\r\n    onResize: function(x, y, width, height) {\r\n      console.log({ x, y, width, height });\r\n      if (this.chartOptions.chart == undefined) {\r\n        this.chartOptions.chart = {};\r\n      }\r\n      this.chartOptions.chart.height = height;\r\n      this.rerendercomponent = false;\r\n       var chart={...this.$store.state.list_charts[this.index]};\r\n       chart.width=width;\r\n       chart.height=height;\r\n      this.$store.dispatch('update_list_chart',{\r\n        index:this.index,\r\n        obj:chart\r\n      })\r\n      this.$nextTick(() => {\r\n        this.rerendercomponent = true;\r\n      });\r\n    },\r\n    onDrag: function(x, y) {\r\n      console.log(x, y);\r\n    },\r\n    onResizeStartCallback(handle, ev) {\r\n      // return false;\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["ListChartItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ListChartItem.vue","sourceRoot":"src/views/pages","sourcesContent":["<template>\r\n  <vue-draggable-resizable\r\n    :w=\"this.charts.width\"\r\n    :h=\"this.charts.height\"\r\n    @dragging=\"onDrag\"\r\n    @resizing=\"onResize\"\r\n    :resizeable=\"resize\"\r\n    :parent=\"false\"\r\n    :onResizeStart=\"onResizeStartCallback\"\r\n  >\r\n    <div class=\"vx-card h-full\">\r\n      <highcharts :options=\"chartOptions\" v-if=\"rerendercomponent\"></highcharts>\r\n    </div>\r\n  </vue-draggable-resizable>\r\n</template>\r\n\r\n<script>\r\nimport * as Highcharts from \"highcharts\";\r\nimport service from \"@/service/service\";\r\n\r\nimport io from \"socket.io-client\";\r\nvar socket = io.connect(\"http://localhost:3000\");\r\nexport default {\r\n  props: {\r\n    index: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data: function() {\r\n    return {\r\n      i: 0,\r\n      width: 500,\r\n      height: 400,\r\n      x: 0,\r\n      y: 300,\r\n      title: this.$store.state.list_charts[this.index].chart_title,\r\n      rerendercomponent: true,\r\n      resize: false,\r\n      chartOptions: {}\r\n    };\r\n  },\r\n  computed: {\r\n    styles() {\r\n      return {\r\n        card1: {\r\n          height: this.height + \"px\"\r\n        }\r\n      };\r\n    },\r\n    charts() {\r\n      return this.$store.state.list_charts[this.index];\r\n    }\r\n  },\r\n  beforeMount(){\r\n    var chart=this.$store.state.list_charts[this.index];\r\n    this.width=chart.width;\r\n    this.height=chart.height;\r\n  },\r\n  async created() {\r\n    var optionResponse = await service.postData(\"/dashboard/getchart_option\", {\r\n      chart_type_id: this.charts.chart_type_id,\r\n      chart_name: this.charts.chart_name,\r\n      series: this.charts.series,\r\n      height: this.charts.height\r\n    });\r\n    this.chartOptions = optionResponse.chartOption;\r\n    this.charts.series.forEach((item,index)=>{\r\n      socket.on('add'+item.device_id, fetchedData => {\r\n        console.log(fetchedData);\r\n        this.chartOptions.series[index].data.push([fetchedData.date,fetchedData[item.column_name]])\r\n      })\r\n      console.log(item);\r\n    })\r\n  },\r\n  mounted() {\r\n    this.rerendercomponent=false;\r\n    // this.chartOptions.height=this.charts.height;\r\n    this.$nextTick(() => {\r\n        this.rerendercomponent = true;\r\n      });\r\n\r\n  },\r\n  methods: {\r\n    onResize: function(x, y, width, height) {\r\n      console.log({ x, y, width, height });\r\n      if (this.chartOptions.chart == undefined) {\r\n        this.chartOptions.chart = {};\r\n      }\r\n      this.chartOptions.chart.height = height;\r\n      this.rerendercomponent = false;\r\n       var chart={...this.$store.state.list_charts[this.index]};\r\n       chart.width=width;\r\n       chart.height=height;\r\n      this.$store.dispatch('update_list_chart',{\r\n        index:this.index,\r\n        obj:chart\r\n      })\r\n      this.$nextTick(() => {\r\n        this.rerendercomponent = true;\r\n      });\r\n    },\r\n    onDrag: function(x, y) {\r\n      console.log(x, y);\r\n    },\r\n    onResizeStartCallback(handle, ev) {\r\n      // return false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.vdr {\r\n  -ms-touch-action: none;\r\n  touch-action: none;\r\n  border: none;\r\n}\r\n</style>\r\n"]}]}