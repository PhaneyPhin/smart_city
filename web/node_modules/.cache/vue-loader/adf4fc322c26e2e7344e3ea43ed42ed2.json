{"remainingRequest":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\views\\pages\\map\\Map1.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\views\\pages\\map\\Map1.vue","mtime":1579447887465},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\css-loader\\index.js","mtime":1579332198977},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1579332241743},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\postcss-loader\\lib\\index.js","mtime":1579332225877},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1579332232707},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1579332241739}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#map_view{\n     margin:0;\n     padding:0;\n     width:100%;\n     height:700px;\n }\n\n",{"version":3,"sources":["Map1.vue"],"names":[],"mappingsssBA;AACA;AACA;AACA;AACA;AACA","file":"Map1.vue","sourceRoot":"src/views/pages/map","sourcesContent":["<template xmlns:>\r\n  <div id=\"map_view\" :class=\"[$options.name]\">\r\n    <!-- app map -->\r\n    <vl-map v-if=\"mapVisible\" class=\"map\" ref=\"map\" :load-tiles-while-animating=\"true\" :load-tiles-while-interacting=\"true\"\r\n            @click=\"clickCoordinate = $event.coordinate\" @postcompose=\"onMapPostCompose\"\r\n            data-projection=\"EPSG:4326\" @mounted=\"onMapMounted\">\r\n      <!-- map view aka ol.View -->\r\n      <vl-view ref=\"view\" :center.sync=\"center\" :zoom.sync=\"zoom\" :rotation.sync=\"rotation\"></vl-view>\r\n\r\n      <!-- interactions -->\r\n      <vl-interaction-select :features.sync=\"selectedFeatures\" v-if=\"drawType == null\">\r\n        <template slot-scope=\"select\">\r\n          <!-- select styles -->\r\n          <vl-style-box>\r\n            <vl-style-stroke color=\"#423e9e\" :width=\"7\"></vl-style-stroke>\r\n            <vl-style-fill :color=\"[254, 178, 76, 0.7]\"></vl-style-fill>\r\n            <vl-style-circle :radius=\"5\">\r\n              <vl-style-stroke color=\"#423e9e\" :width=\"7\"></vl-style-stroke>\r\n              <vl-style-fill :color=\"[254, 178, 76, 0.7]\"></vl-style-fill>\r\n            </vl-style-circle>\r\n          </vl-style-box>\r\n          <vl-style-box :z-index=\"1\">\r\n            <vl-style-stroke color=\"#d43f45\" :width=\"2\"></vl-style-stroke>\r\n            <vl-style-circle :radius=\"5\">\r\n              <vl-style-stroke color=\"#d43f45\" :width=\"2\"></vl-style-stroke>\r\n            </vl-style-circle>\r\n          </vl-style-box>\r\n          <!--// select styles -->\r\n\r\n          <!-- selected feature popup -->\r\n          <vl-overlay class=\"feature-popup\" v-for=\"feature in select.features\" :key=\"feature.id\" :id=\"feature.id\"\r\n                      :position=\"pointOnSurface(feature.geometry)\" :auto-pan=\"true\" :auto-pan-animation=\"{ duration: 300 }\">\r\n            <template slot-scope=\"popup\">\r\n              <section class=\"card\">\r\n                <header class=\"card-header\">\r\n                  <p class=\"card-header-title\">\r\n                    Feature ID {{ feature.id }}\r\n                  </p>\r\n                  <a class=\"card-header-icon\" title=\"Close\"\r\n                     @click=\"selectedFeatures = selectedFeatures.filter(f => f.id !== feature.id)\">\r\n                    <b-icon icon=\"close\"></b-icon>\r\n                  </a>\r\n                </header>\r\n                <div class=\"card-content\">\r\n                  <div class=\"content\">\r\n                    <p>\r\n                      Overlay popup content for Feature with ID <strong>{{ feature.id }}</strong>\r\n                    </p>\r\n                    <p>\r\n                      Popup: {{ JSON.stringify(popup) }}\r\n                    </p>\r\n                    <p>\r\n                      Feature: {{ JSON.stringify({ id: feature.id, properties: feature.properties }) }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </section>\r\n            </template>\r\n          </vl-overlay>\r\n          <!--// selected popup -->\r\n        </template>\r\n      </vl-interaction-select>\r\n      <!--// interactions -->\r\n\r\n      <!-- geolocation -->\r\n      <vl-geoloc @update:position=\"onUpdatePosition\">\r\n        <template slot-scope=\"geoloc\">\r\n          <vl-feature v-if=\"geoloc.position\" id=\"position-feature\">\r\n            <vl-geom-point :coordinates=\"geoloc.position\"></vl-geom-point>\r\n            <vl-style-box>\r\n              <vl-style-icon src=\"./assets/marker.png\" :scale=\"0.4\" :anchor=\"[0.5, 1]\"></vl-style-icon>\r\n            </vl-style-box>\r\n          </vl-feature>\r\n        </template>\r\n      </vl-geoloc>\r\n      <!--// geolocation -->\r\n\r\n      <!-- overlay marker with animation -->\r\n      <vl-feature id=\"marker\" ref=\"marker\" :properties=\"{ start: Date.now(), duration: 2500 }\">\r\n        <template slot-scope=\"feature\">\r\n          <vl-geom-point :coordinates=\"[ 100.61506779999999, 13.7531888 ]\"></vl-geom-point>\r\n          <vl-style-box>\r\n            <vl-style-icon src=\"./assets/flag.png\" :scale=\"0.5\" :anchor=\"[0.1, 0.95]\" :size=\"[128, 128]\"></vl-style-icon>\r\n          </vl-style-box>\r\n        \r\n        </template>\r\n      </vl-feature>\r\n      <!--// overlay marker -->\r\n\r\n\r\n      <!-- circle geom -->\r\n      <vl-feature id=\"circle\">\r\n        <vl-geom-circle :radius=\"1000000\" :coordinates=\"[0, 30]\"></vl-geom-circle>\r\n      </vl-feature>\r\n      <!--// circle geom -->\r\n\r\n      <!-- base layers -->\r\n      <vl-layer-tile v-for=\"layer in baseLayers\" :key=\"layer.name\" :id=\"layer.name\" :visible=\"layer.visible\">\r\n        <component :is=\"'vl-source-' + layer.name\" v-bind=\"layer\"></component>\r\n      </vl-layer-tile>\r\n      <!--// base layers -->\r\n\r\n      <!-- other layers from config -->\r\n      <component v-for=\"layer in layers\" :is=\"layer.cmp\" v-if=\"layer.visible\" :key=\"layer.id\" v-bind=\"layer\">\r\n        <!-- add vl-source-* -->\r\n        <component :is=\"layer.source.cmp\" v-bind=\"layer.source\">\r\n          <!-- add static features to vl-source-vector if provided -->\r\n          <vl-feature v-if=\"layer.source.staticFeatures && layer.source.staticFeatures.length\"\r\n                      v-for=\"feature in layer.source.staticFeatures\" :key=\"feature.id\"\r\n                      :id=\"feature.id\" :properties=\"feature.properties\">\r\n            <component :is=\"geometryTypeToCmpName(feature.geometry.type)\" v-bind=\"feature.geometry\"></component>\r\n          </vl-feature>\r\n\r\n          <!-- add inner source if provided (like vl-source-vector inside vl-source-cluster) -->\r\n          <component v-if=\"layer.source.source\" :is=\"layer.source.source.cmp\" v-bind=\"layer.source.source\">\r\n            <!-- add static features to vl-source-vector if provided -->\r\n            <vl-feature v-if=\"layer.source.source.staticFeatures && layer.source.source.staticFeatures.length\"\r\n                        v-for=\"feature in layer.source.source.staticFeatures\" :key=\"feature.id\"\r\n                        :id=\"feature.id\" :properties=\"feature.properties\">\r\n              <component :is=\"geometryTypeToCmpName(feature.geometry.type)\" v-bind=\"feature.geometry\"></component>\r\n            </vl-feature>\r\n          </component>\r\n        </component>\r\n        <!--// vl-source-* -->\r\n\r\n        <!-- add style components if provided -->\r\n        <!-- create vl-style-box or vl-style-func -->\r\n        <component v-if=\"layer.style\" v-for=\"(style, i) in layer.style\" :key=\"i\" :is=\"style.cmp\" v-bind=\"style\">\r\n          <!-- create inner style components: vl-style-circle, vl-style-icon, vl-style-fill, vl-style-stroke & etc -->\r\n          <component v-if=\"style.styles\" v-for=\"(st, cmp) in style.styles\" :key=\"cmp\" :is=\"cmp\" v-bind=\"st\">\r\n            <!-- vl-style-fill, vl-style-stroke if provided -->\r\n            <vl-style-fill v-if=\"st.fill\" v-bind=\"st.fill\"></vl-style-fill>\r\n            <vl-style-stroke v-if=\"st.stroke\" v-bind=\"st.stroke\"></vl-style-stroke>\r\n          </component>\r\n        </component>\r\n        <!--// style -->\r\n      </component>\r\n      <!--// other layers -->\r\n\r\n      <!-- draw components -->\r\n      <vl-layer-vector id=\"draw-pane\" v-if=\"mapPanel.tab === 'draw'\">\r\n        <vl-source-vector ident=\"draw-target\" :features.sync=\"drawnFeatures\"></vl-source-vector>\r\n      </vl-layer-vector>\r\n\r\n      <vl-interaction-draw v-if=\"mapPanel.tab === 'draw' && drawType\" source=\"draw-target\" :type=\"drawType\"></vl-interaction-draw>\r\n      <vl-interaction-modify v-if=\"mapPanel.tab === 'draw'\" source=\"draw-target\"></vl-interaction-modify>\r\n      <vl-interaction-snap v-if=\"mapPanel.tab === 'draw'\" source=\"draw-target\" :priority=\"10\"></vl-interaction-snap>\r\n      <!--// draw components -->\r\n    </vl-map>\r\n    <!--// app map -->\r\n\r\n    <!-- map panel, controls -->\r\n    <div class=\"map-panel\">\r\n      <b-collapse class=\"panel box is-paddingless\" :open.sync=\"panelOpen\">\r\n        <div slot=\"trigger\" class=\"panel-heading\">\r\n          <div class=\"columns\">\r\n            <div class=\"column is-11\">\r\n              <strong>Map panel</strong>\r\n            </div>\r\n            <div class=\"column\">\r\n              <b-icon :icon=\"panelOpen ? 'chevron-up' : 'chevron-down'\" size=\"is-small\"></b-icon>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <p class=\"panel-tabs\">\r\n          <a @click=\"showMapPanelTab('state')\" :class=\"mapPanelTabClasses('state')\">State</a>\r\n          <a @click=\"showMapPanelTab('layers')\" :class=\"mapPanelTabClasses('layers')\">Layers</a>\r\n          <a @click=\"showMapPanelTab('draw')\" :class=\"mapPanelTabClasses('draw')\">Draw</a>\r\n        </p>\r\n\r\n        <div class=\"panel-block\" v-show=\"mapPanel.tab === 'state'\">\r\n          <table class=\"table is-fullwidth\">\r\n            <tr>\r\n              <th>Map center</th>\r\n              <td>{{ center }}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Map zoom</th>\r\n              <td>{{ zoom }}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Map rotation</th>\r\n              <td>{{ rotation }}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Device coordinate</th>\r\n              <td>{{ deviceCoordinate }}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Selected features</th>\r\n              <td>{{ selectedFeatures.map(f => f.id) }}</td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n\r\n        <div class=\"panel-block\" v-for=\"layer in layers\" :key=\"layer.id\" @click=\"showMapPanelLayer\"\r\n             :class=\"{ 'is-active': layer.visible }\"\r\n             v-show=\"mapPanel.tab === 'layers'\">\r\n          <b-switch :key=\"layer.id\" v-model=\"layer.visible\">\r\n            {{ layer.title }}\r\n          </b-switch>\r\n        </div>\r\n\r\n        <div class=\"panel-block draw-panel\" v-show=\"mapPanel.tab === 'draw'\">\r\n          <div class=\"buttons\">\r\n            <button v-for=\"control in drawControls\" :key=\"control.type || -1\" @click=\"drawType = control.type\"\r\n                    :class=\"drawType && drawType === control.type ? 'is-info' : ''\" class=\"button\" >\r\n              <b-icon :icon=\"control.icon\"></b-icon>\r\n              <span>{{ control.label }}</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </b-collapse>\r\n    </div>\r\n    <!--// map panel, controls -->\r\n\r\n    <!-- base layers switch -->\r\n    <div class=\"base-layers-panel\">\r\n      <div class=\"buttons has-addons\">\r\n        <button class=\"button is-light\" v-for=\"layer in baseLayers\"\r\n                :key=\"layer.name\" :class=\"{ 'is-info': layer.visible }\"\r\n                @click=\"showBaseLayer(layer.name)\">\r\n          {{ layer.title }}\r\n        </button>\r\n        <button class=\"button is-light\" @click=\"mapVisible = !mapVisible\">\r\n          {{ mapVisible ? 'Hide map' : 'Show map' }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <!--// base layers -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import { kebabCase, range, random, camelCase } from 'lodash'\r\n  import { createProj, addProj, findPointOnSurface, createStyle, createMultiPointGeom, loadingBBox } from 'vuelayers/lib/ol-ext'\r\n  import pacmanFeaturesCollection from '@/service/pacman'\r\n  import ScaleLine from 'ol/control/ScaleLine'\r\n  import FullScreen from 'ol/control/FullScreen'\r\n  import OverviewMap from 'ol/control/OverviewMap'\r\n  import ZoomSlider from 'ol/control/ZoomSlider'\r\n\r\n  // Custom projection for static Image layer\r\n  let x = 1024 * 10000\r\n  let y = 968 * 10000\r\n  let imageExtent = [-x / 2, -y / 2, x / 2, y / 2]\r\n  let customProj = createProj({\r\n    code: 'xkcd-image',\r\n    units: 'pixels',\r\n    extent: imageExtent,\r\n  })\r\n  // add to the list of known projections\r\n  // after that it can be used by code\r\n  addProj(customProj)\r\n\r\n  const easeInOut = t => 1 - Math.pow(1 - t, 3)\r\n\r\n  const methods = {\r\n    camelCase,\r\n    pointOnSurface: findPointOnSurface,\r\n    geometryTypeToCmpName (type) {\r\n      return 'vl-geom-' + kebabCase(type)\r\n    },\r\n    /**\r\n     * Packman layer Style function factory\r\n     * @return {ol.StyleFunction}\r\n     */\r\n    pacmanStyleFunc () {\r\n      const pacman = [\r\n        createStyle({\r\n          strokeColor: '#de9147',\r\n          strokeWidth: 3,\r\n          fillColor: [222, 189, 36, 0.8],\r\n        }),\r\n      ]\r\n      const path = [\r\n        createStyle({\r\n          strokeColor: 'blue',\r\n          strokeWidth: 1,\r\n        }),\r\n        createStyle({\r\n          imageRadius: 5,\r\n          imageFillColor: 'orange',\r\n          geom (feature) {\r\n            // geometry is an LineString, convert it to MultiPoint to style vertex\r\n            return createMultiPointGeom(feature.getGeometry().getCoordinates())\r\n          },\r\n        }),\r\n      ]\r\n      const eye = [\r\n        createStyle({\r\n          imageRadius: 6,\r\n          imageFillColor: '#444444',\r\n        }),\r\n      ]\r\n\r\n      return function __pacmanStyleFunc (feature) {\r\n        switch (feature.getId()) {\r\n          case 'pacman':\r\n            return pacman\r\n          case 'pacman-path':\r\n            return path\r\n          case 'pacman-eye':\r\n            return eye\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * Cluster layer style function factory\r\n     * @return {ol.StyleFunction}\r\n     */\r\n    clusterStyleFunc () {\r\n      const cache = {}\r\n\r\n      return function __clusterStyleFunc (feature) {\r\n        const size = feature.get('features').length\r\n        let style = cache[size]\r\n\r\n        if (!style) {\r\n          style = createStyle({\r\n            imageRadius: 10,\r\n            strokeColor: '#fff',\r\n            fillColor: '#3399cc',\r\n            text: size.toString(),\r\n            textFillColor: '#fff',\r\n          })\r\n          cache[size] = style\r\n        }\r\n        return [style]\r\n      }\r\n    },\r\n    selectFilter (feature) {\r\n      return ['position-feature'].indexOf(feature.getId()) === -1\r\n    },\r\n    onUpdatePosition (coordinate) {\r\n      this.deviceCoordinate = coordinate\r\n    },\r\n    onMapPostCompose ({ vectorContext, frameState }) {\r\n      if (!this.$refs.marker || !this.$refs.marker.$feature) return\r\n\r\n      const feature = this.$refs.marker.$feature\r\n      if (!feature.getGeometry() || !feature.getStyle()) return\r\n\r\n      const flashGeom = feature.getGeometry().clone()\r\n      const duration = feature.get('duration')\r\n      const elapsed = frameState.time - feature.get('start')\r\n      const elapsedRatio = elapsed / duration\r\n      const radius = easeInOut(elapsedRatio) * 35 + 5\r\n      const opacity = easeInOut(1 - elapsedRatio)\r\n      const fillOpacity = easeInOut(0.5 - elapsedRatio)\r\n\r\n      vectorContext.setStyle(createStyle({\r\n        imageRadius: radius,\r\n        fillColor: [119, 170, 203, fillOpacity],\r\n        strokeColor: [119, 170, 203, opacity],\r\n        strokeWidth: 2 + opacity,\r\n      }))\r\n\r\n      vectorContext.drawGeometry(flashGeom)\r\n      vectorContext.setStyle(feature.getStyle()(feature)[0])\r\n      vectorContext.drawGeometry(feature.getGeometry())\r\n\r\n      if (elapsed > duration) {\r\n        feature.set('start', Date.now())\r\n      }\r\n\r\n      this.$refs.map.render()\r\n    },\r\n    onMapMounted () {\r\n      // now ol.Map instance is ready and we can work with it directly\r\n      this.$refs.map.$map.getControls().extend([\r\n        new ScaleLine(),\r\n        new FullScreen(),\r\n        new OverviewMap({\r\n          collapsed: false,\r\n          collapsible: true,\r\n        }),\r\n        new ZoomSlider(),\r\n      ])\r\n    },\r\n    // base layers\r\n    showBaseLayer (name) {\r\n      let layer = this.baseLayers.find(layer => layer.visible)\r\n      if (layer != null) {\r\n        layer.visible = false\r\n      }\r\n\r\n      layer = this.baseLayers.find(layer => layer.name === name)\r\n      if (layer != null) {\r\n        layer.visible = true\r\n      }\r\n    },\r\n    // map panel\r\n    mapPanelTabClasses (tab) {\r\n      return {\r\n        'is-active': this.mapPanel.tab === tab,\r\n      }\r\n    },\r\n    showMapPanelLayer (layer) {\r\n      layer.visible = !layer.visible\r\n    },\r\n    showMapPanelTab (tab) {\r\n      this.mapPanel.tab = tab\r\n      if (tab !== 'draw') {\r\n        this.drawType = undefined\r\n      }\r\n    },\r\n  }\r\n\r\n  export default {\r\n    name: 'vld-demo-app',\r\n    methods,\r\n    data () {\r\n      return {\r\n        center: [0, 0],\r\n        zoom: 2,\r\n        rotation: 0,\r\n        clickCoordinate: undefined,\r\n        selectedFeatures: [],\r\n        deviceCoordinate: undefined,\r\n        mapPanel: {\r\n          tab: 'state',\r\n        },\r\n        panelOpen: true,\r\n        mapVisible: true,\r\n        drawControls: [\r\n          {\r\n            type: 'point',\r\n            label: 'Draw Point',\r\n            icon: 'map-marker',\r\n          },\r\n          {\r\n            type: 'line-string',\r\n            label: 'Draw LineString',\r\n            icon: 'minus',\r\n          },\r\n          {\r\n            type: 'polygon',\r\n            label: 'Draw Polygon',\r\n            icon: 'square-o',\r\n          },\r\n          {\r\n            type: 'circle',\r\n            label: 'Draw Circle',\r\n            icon: 'circle-thin',\r\n          },\r\n          {\r\n            type: undefined,\r\n            label: 'Stop drawing',\r\n            icon: 'times',\r\n          },\r\n        ],\r\n        drawType: undefined,\r\n        drawnFeatures: [],\r\n        // base layers\r\n        baseLayers: [\r\n          {\r\n            name: 'osm',\r\n            title: 'OpenStreetMap',\r\n            visible: true,\r\n          },\r\n          {\r\n            name: 'sputnik',\r\n            title: 'Sputnik Maps',\r\n            visible: false,\r\n          },\r\n          // needs paid plan to get key\r\n          // {\r\n          //   name: 'mapbox',\r\n          //   title: 'Mapbox',\r\n          // },\r\n          {\r\n            name: 'bingmaps',\r\n            title: 'Bing Maps',\r\n            apiKey: 'ArbsA9NX-AZmebC6VyXAnDqjXk6mo2wGCmeYM8EwyDaxKfQhUYyk0jtx6hX5fpMn',\r\n            imagerySet: 'CanvasGray',\r\n            visible: false,\r\n          },\r\n        ],\r\n        // layers config\r\n        layers: [\r\n          // Packman vector layer with static vector features\r\n          // rendered through vl-feature component.\r\n          {\r\n            id: 'pacman',\r\n            title: 'Pacman',\r\n            cmp: 'vl-layer-vector',\r\n            visible: false,\r\n            renderMode: 'image',\r\n            source: {\r\n              cmp: 'vl-source-vector',\r\n              staticFeatures: pacmanFeaturesCollection.features,\r\n            },\r\n            style: [\r\n              {\r\n                cmp: 'vl-style-func',\r\n                factory: this.pacmanStyleFunc,\r\n              },\r\n            ],\r\n          },\r\n          // Circles\r\n          {\r\n            id: 'circles',\r\n            title: 'Circles',\r\n            cmp: 'vl-layer-vector',\r\n            visible: false,\r\n            source: {\r\n              cmp: 'vl-source-vector',\r\n              staticFeatures: range(0, 100).map(i => {\r\n                let coordinate = [\r\n                  random(-50, 50),\r\n                  random(-50, 50),\r\n                ]\r\n\r\n                return {\r\n                  type: 'Feature',\r\n                  id: 'random-cirlce-' + i,\r\n                  geometry: {\r\n                    type: 'Circle',\r\n                    coordinates: coordinate,\r\n                    radius: random(Math.pow(10, 5), Math.pow(10, 6)),\r\n                  },\r\n                }\r\n              }),\r\n            },\r\n          },\r\n          // Countries vector layer\r\n          // loads GeoJSON data from remote server\r\n          {\r\n            id: 'countries',\r\n            title: 'Countries',\r\n            cmp: 'vl-layer-vector',\r\n            visible: false,\r\n            source: {\r\n              cmp: 'vl-source-vector',\r\n              url: 'https://openlayers.org/en/latest/examples/data/geojson/countries.geojson',\r\n            },\r\n            style: [\r\n              {\r\n                cmp: 'vl-style-box',\r\n                styles: {\r\n                  'vl-style-fill': {\r\n                    color: [255, 255, 255, 0.5],\r\n                  },\r\n                  'vl-style-stroke': {\r\n                    color: '#219e46',\r\n                    width: 2,\r\n                  },\r\n                  'vl-style-text': {\r\n                    text: '\\uf041',\r\n                    font: '24px FontAwesome',\r\n                    fill: {\r\n                      color: '#2355af',\r\n                    },\r\n                    stroke: {\r\n                      color: 'white',\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          // Tile layer with WMS source\r\n          {\r\n            id: 'wms',\r\n            title: 'WMS',\r\n            cmp: 'vl-layer-tile',\r\n            visible: false,\r\n            source: {\r\n              cmp: 'vl-source-wms',\r\n              url: 'https://ahocevar.com/geoserver/wms',\r\n              layers: 'topp:states',\r\n              extParams: { TILED: true },\r\n              serverType: 'geoserver',\r\n            },\r\n          },\r\n          // Tile layer with WMTS source\r\n          {\r\n            id: 'wmts',\r\n            title: 'WMTS',\r\n            cmp: 'vl-layer-tile',\r\n            visible: false,\r\n            source: {\r\n              cmp: 'vl-source-wmts',\r\n              url: 'https://services.arcgisonline.com/arcgis/rest/services/Demographics/USA_Population_Density/MapServer/WMTS/',\r\n              layerName: '0',\r\n              matrixSet: 'EPSG:3857',\r\n              format: 'image/png',\r\n              styleName: 'default',\r\n            },\r\n          },\r\n          // Vector layer with clustering\r\n          {\r\n            id: 'cluster',\r\n            title: 'Cluster',\r\n            cmp: 'vl-layer-vector',\r\n            renderMode: 'image',\r\n            visible: false,\r\n            // Cluster source (vl-source-cluster) wraps vector source (vl-source-vector)\r\n            source: {\r\n              cmp: 'vl-source-cluster',\r\n              distance: 50,\r\n              source: {\r\n                cmp: 'vl-source-vector',\r\n                // features defined as array of GeoJSON encoded Features\r\n                // to not overload Vue and DOM\r\n                features: range(0, 10000).map(i => {\r\n                  let coordinate = [\r\n                    random(-50, 50),\r\n                    random(-50, 50),\r\n                  ]\r\n\r\n                  return {\r\n                    type: 'Feature',\r\n                    id: 'random-' + i,\r\n                    geometry: {\r\n                      type: 'Point',\r\n                      coordinates: coordinate,\r\n                    },\r\n                  }\r\n                }),\r\n              },\r\n            },\r\n            style: [\r\n              {\r\n                cmp: 'vl-style-func',\r\n                factory: this.clusterStyleFunc,\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: 'wfs',\r\n            title: 'WFS (Canada water areas)',\r\n            cmp: 'vl-layer-vector',\r\n            visible: false,\r\n            renderMode: 'image',\r\n            source: {\r\n              cmp: 'vl-source-vector',\r\n              features: [],\r\n              url (extent, resolution, projection) {\r\n                return 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\r\n                  'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\r\n                  'outputFormat=application/json&srsname=' + projection + '&' +\r\n                  'bbox=' + extent.join(',') + ',' + projection\r\n              },\r\n              strategyFactory () {\r\n                return loadingBBox\r\n              },\r\n            },\r\n          },\r\n          {\r\n            id: 'static-image',\r\n            title: 'Static Image with custom projection',\r\n            cmp: 'vl-layer-image',\r\n            visible: false,\r\n            source: {\r\n              cmp: 'vl-source-image-static',\r\n              projection: customProj.getCode(),\r\n              url: 'https://imgs.xkcd.com/comics/online_communities.png',\r\n              size: [1024, 968],\r\n              extent: imageExtent,\r\n            },\r\n          },\r\n          {\r\n            id: 'wms-image',\r\n            title: 'Image WMS',\r\n            cmp: 'vl-layer-image',\r\n            visible: false,\r\n            source: {\r\n              cmp: 'vl-source-image-wms',\r\n              url: 'https://ahocevar.com/geoserver/wms',\r\n              layers: 'topp:states',\r\n              serverType: 'geoserver',\r\n            },\r\n          },\r\n          {\r\n            id: 'vector-tiles',\r\n            title: 'Vector tiles',\r\n            cmp: 'vl-layer-vector-tile',\r\n            visible: false,\r\n            source: {\r\n              cmp: 'vl-source-vector-tile',\r\n              url: 'https://basemaps.arcgis.com/v1/arcgis/rest/services/World_Basemap/VectorTileServer/tile/{z}/{y}/{x}.pbf',\r\n            },\r\n            style: [\r\n              {\r\n                cmp: 'vl-style-box',\r\n                styles: {\r\n                  'vl-style-stroke': {\r\n                    width: 2,\r\n                    color: '#2979ff',\r\n                  },\r\n                  'vl-style-circle': {\r\n                    radius: 5,\r\n                    stroke: {\r\n                      width: 1.5,\r\n                      color: '#2979ff',\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      }\r\n    },\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n   #map_view{\r\n        margin:0;\r\n        padding:0;\r\n        width:100%;\r\n        height:700px;\r\n    }\r\n  \r\n</style>\r\n"]}]}