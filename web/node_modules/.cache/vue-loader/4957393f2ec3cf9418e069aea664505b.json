{"remainingRequest":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\views\\pages\\TestResize.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\views\\pages\\TestResize.vue","mtime":1579838830014},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1579332188909},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1579332241739}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport ListChart from \"./ListChart\";\r\nimport { Validator } from \"vee-validate\";\r\nimport service from \"@/service/service\";\r\nconst dict = {\r\n  custom: {\r\n    chart_title: {\r\n      required: \"Please enter chart name\",\r\n      alpha: \"Your first name may only contain alphabetic characters\"\r\n    },\r\n    chart_name: {\r\n      required: \"Please enter your last name\",\r\n      alpha: \"Your last name may only contain alphabetic characters\"\r\n    }\r\n  }\r\n};\r\nexport default {\r\n  components: {\r\n    \"list-chart\": ListChart\r\n  },\r\n  data: function() {\r\n    return {\r\n      chart_name: \"\",\r\n      chart_title: \"\",\r\n      popupActive: false,\r\n      chart_type:\"\",\r\n      chart_types: [],\r\n      devices:[],\r\n      columns:[[]],\r\n      select1:\"\",\r\n      columns:[],\r\n      device:\"\",\r\n      column_name:\"\",\r\n      list_series:[]\r\n    };\r\n  },\r\n  computed: {},\r\n  async created() {\r\n    var chartTypeResponse = await service.postData(\r\n      \"dashboard/getchart_type\",\r\n      {}\r\n    );\r\n    this.chart_types = chartTypeResponse.data;\r\n    var deviceResponse=await service.postData('device/getDeviceTest',{});\r\n    this.devices=deviceResponse.data;\r\n\r\n\r\n  },\r\n  methods: {\r\n    addDashboard() {\r\n      this.popupActive = true;\r\n\r\n      // this.$store.dispatch(\"push_list_charts\", { title: \"Hello world\" });\r\n    },\r\n    submitForm() {\r\n      this.$validator.validateAll().then(result => {\r\n        if (result) {\r\n          // if form have no errors\r\n\r\n          this.$store.dispatch(\"push_list_charts\", {\r\n            chart_title: this.chart_title,\r\n            chart_name: this.chart_name,\r\n            chart_type_id: this.chart_type,\r\n             width:500,\r\n             height:300,\r\n            series:this.list_series.map((item)=>{\r\n              return {\r\n                device_id:item.device_id,\r\n                column_name:item.column_name\r\n               \r\n              }\r\n            })\r\n          });\r\n          this.popupActive = false;\r\n        } else {\r\n          // form have errors\r\n        }\r\n      });\r\n    },\r\n    removeSerie(){\r\n      if(this.list_series.length>0){\r\n        this.list_series.pop();\r\n      }\r\n    },\r\n    async onDeviceChange(index){\r\n      // alert(index)\r\n      var columResponse=await service.postData('device/getFieldDevice',{device_id:this.list_series[index].device_id});\r\n      this.list_series[index].columns=columResponse.data;\r\n    },\r\n    addSeries(){\r\n      this.list_series.push({device_id:\"\",column_name:\"\",columns:[]})\r\n    },\r\n    // async onEquipmentChange(index){\r\n    //   // alert(index)\r\n    //   console.log(this.list_series[index]);\r\n    //  var columResponse=await service.postData('equipment/getFieldEquipment',{device_id:this.list_series[index].equipment});\r\n    //   this.list_series[index].columns=columResponse.data;\r\n      \r\n    // }\r\n  },\r\n  watch:{\r\n    async equipment(val){\r\n      \r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["TestResize.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"TestResize.vue","sourceRoot":"src/views/pages","sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"w-full\" style=\"text-align:right\">\r\n      <vs-button color=\"primary\" @click=\"addDashboard()\">add dashboard</vs-button>\r\n    </div>\r\n    <list-chart />\r\n\r\n    <vs-popup class title=\"Chart Description\" :active.sync=\"popupActive\">\r\n      <form>\r\n        <vs-input\r\n          :warning=\"errors.has('chart_title')\"\r\n          :warning-text=\"$t('chart title is required')\"\r\n          :label-placeholder=\"$t('chart title')\"\r\n          val-icon-warning=\"warning\"\r\n          v-validate=\"'required'\"\r\n          name=\"chart_title\"\r\n          v-model=\"chart_title\"\r\n          class=\"w-full mt-5\"\r\n          icon-pack=\"feather\"\r\n          icon=\"icon-user\"\r\n          icon-no-border\r\n        />\r\n        <vs-input\r\n          :warning=\"errors.has('chart_name')\"\r\n          :warning-text=\"$t('chart name is required')\"\r\n          :label-placeholder=\"$t('chart name')\"\r\n          val-icon-warning=\"warning\"\r\n          v-validate=\"'required'\"\r\n          name=\"chart_name\"\r\n          v-model=\"chart_name\"\r\n          class=\"w-full mt-5\"\r\n          icon-pack=\"feather\"\r\n          icon=\"icon-user\"\r\n          icon-no-border\r\n        />\r\n        <div class=\"mt-5\">\r\n            <label >please select the chart</label>\r\n            <select\r\n              name=\"chart_type\"\r\n              class=\"vs-inputx vs-input--input normal\"\r\n              v-validate=\"'required'\"\r\n              v-model=\"chart_type\"\r\n            >\r\n              <option\r\n              \r\n                v-for=\"(item,index) in chart_types\"\r\n                :value=\"item.chart_type_id\"\r\n                :key=\"index\"\r\n              >{{item.chart_type_name}}</option>/>\r\n              <!-- <vs-select-item :value=\"2\" :text=\"$t('Bar Chart')\" /> -->\r\n            </select>\r\n\r\n        </div>\r\n        <div class=\"mt-5\"></div>\r\n        \r\n        <div class=\"mt-5 vx-row pl-5 pr-5\">\r\n          <vs-button type=\"filled\" @click.prevent=\"addSeries()\" class=\"mt-5 block\">Add Serie</vs-button>\r\n          <vs-button type=\"filled\" color=\"danger\" @click.prevent=\"removeSerie()\" class=\"mt-5 ml-5 block\">remove one</vs-button>\r\n        </div>\r\n        <div v-for=\"(serie,index_serie) of list_series\" :key=\"index_serie\" class=\"pl-10 pr-10\">\r\n            <div class=\"mt-5\">\r\n            <label >Device</label>\r\n            <select\r\n              name=\"chart_type\"\r\n              class=\"vs-inputx vs-input--input normal\"\r\n              v-validate=\"'required'\"\r\n              v-model=\"serie.device_id\"\r\n              @change=\"onDeviceChange(index_serie)\"\r\n            >\r\n              <option\r\n              \r\n                v-for=\"(item,index) in devices\"\r\n                :value=\"item.device_id\"\r\n                :key=\"index\"\r\n              >{{item.device_name}}({{item.device_id}})</option>/>\r\n              <!-- <vs-select-item :value=\"2\" :text=\"$t('Bar Chart')\" /> -->\r\n            </select>\r\n          </div>\r\n            <label >Column</label>\r\n            <select\r\n              name=\"chart_type\"\r\n              class=\"vs-inputx vs-input--input normal\"\r\n              v-validate=\"'required'\"\r\n              v-model=\"serie.column_name\"\r\n            >\r\n              <option\r\n              \r\n                v-for=\"(item,index) in serie.columns\"\r\n                :value=\"item.column_name\"\r\n                :key=\"index\"\r\n              >{{item.column_name}}</option>/>\r\n              <!-- <vs-select-item :value=\"2\" :text=\"$t('Bar Chart')\" /> -->\r\n          </select>\r\n        </div>\r\n        <vs-button type=\"filled\" @click.prevent=\"submitForm\" class=\"mt-5 block\">Submit</vs-button>\r\n      </form>\r\n    </vs-popup>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ListChart from \"./ListChart\";\r\nimport { Validator } from \"vee-validate\";\r\nimport service from \"@/service/service\";\r\nconst dict = {\r\n  custom: {\r\n    chart_title: {\r\n      required: \"Please enter chart name\",\r\n      alpha: \"Your first name may only contain alphabetic characters\"\r\n    },\r\n    chart_name: {\r\n      required: \"Please enter your last name\",\r\n      alpha: \"Your last name may only contain alphabetic characters\"\r\n    }\r\n  }\r\n};\r\nexport default {\r\n  components: {\r\n    \"list-chart\": ListChart\r\n  },\r\n  data: function() {\r\n    return {\r\n      chart_name: \"\",\r\n      chart_title: \"\",\r\n      popupActive: false,\r\n      chart_type:\"\",\r\n      chart_types: [],\r\n      devices:[],\r\n      columns:[[]],\r\n      select1:\"\",\r\n      columns:[],\r\n      device:\"\",\r\n      column_name:\"\",\r\n      list_series:[]\r\n    };\r\n  },\r\n  computed: {},\r\n  async created() {\r\n    var chartTypeResponse = await service.postData(\r\n      \"dashboard/getchart_type\",\r\n      {}\r\n    );\r\n    this.chart_types = chartTypeResponse.data;\r\n    var deviceResponse=await service.postData('device/getDeviceTest',{});\r\n    this.devices=deviceResponse.data;\r\n\r\n\r\n  },\r\n  methods: {\r\n    addDashboard() {\r\n      this.popupActive = true;\r\n\r\n      // this.$store.dispatch(\"push_list_charts\", { title: \"Hello world\" });\r\n    },\r\n    submitForm() {\r\n      this.$validator.validateAll().then(result => {\r\n        if (result) {\r\n          // if form have no errors\r\n\r\n          this.$store.dispatch(\"push_list_charts\", {\r\n            chart_title: this.chart_title,\r\n            chart_name: this.chart_name,\r\n            chart_type_id: this.chart_type,\r\n             width:500,\r\n             height:300,\r\n            series:this.list_series.map((item)=>{\r\n              return {\r\n                device_id:item.device_id,\r\n                column_name:item.column_name\r\n               \r\n              }\r\n            })\r\n          });\r\n          this.popupActive = false;\r\n        } else {\r\n          // form have errors\r\n        }\r\n      });\r\n    },\r\n    removeSerie(){\r\n      if(this.list_series.length>0){\r\n        this.list_series.pop();\r\n      }\r\n    },\r\n    async onDeviceChange(index){\r\n      // alert(index)\r\n      var columResponse=await service.postData('device/getFieldDevice',{device_id:this.list_series[index].device_id});\r\n      this.list_series[index].columns=columResponse.data;\r\n    },\r\n    addSeries(){\r\n      this.list_series.push({device_id:\"\",column_name:\"\",columns:[]})\r\n    },\r\n    // async onEquipmentChange(index){\r\n    //   // alert(index)\r\n    //   console.log(this.list_series[index]);\r\n    //  var columResponse=await service.postData('equipment/getFieldEquipment',{device_id:this.list_series[index].equipment});\r\n    //   this.list_series[index].columns=columResponse.data;\r\n      \r\n    // }\r\n  },\r\n  watch:{\r\n    async equipment(val){\r\n      \r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\niframe {\r\n  border: 1px solid black;\r\n  width: 500px;\r\n  height: 500px;\r\n}\r\n\r\n.output {\r\n  background: #eee;\r\n}\r\n.span-text-validation-warning {\r\n  color: rgba(255, 159, 67, 1) !important;\r\n}\r\n</style>\r\n"]}]}