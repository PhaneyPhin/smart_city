{"remainingRequest":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\views\\pages\\map\\Map1.vue?vue&type=template&id=5b4b504d&xmlns%3A=true&","dependencies":[{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\views\\pages\\map\\Map1.vue","mtime":1579447887465},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1579332241744},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1579332241739}],"contextDependencies":[],"result":["\n<div id=\"map_view\" :class=\"[$options.name]\">\n  <!-- app map -->\n  <vl-map v-if=\"mapVisible\" class=\"map\" ref=\"map\" :load-tiles-while-animating=\"true\" :load-tiles-while-interacting=\"true\"\n          @click=\"clickCoordinate = $event.coordinate\" @postcompose=\"onMapPostCompose\"\n          data-projection=\"EPSG:4326\" @mounted=\"onMapMounted\">\n    <!-- map view aka ol.View -->\n    <vl-view ref=\"view\" :center.sync=\"center\" :zoom.sync=\"zoom\" :rotation.sync=\"rotation\"></vl-view>\n\n    <!-- interactions -->\n    <vl-interaction-select :features.sync=\"selectedFeatures\" v-if=\"drawType == null\">\n      <template slot-scope=\"select\">\n        <!-- select styles -->\n        <vl-style-box>\n          <vl-style-stroke color=\"#423e9e\" :width=\"7\"></vl-style-stroke>\n          <vl-style-fill :color=\"[254, 178, 76, 0.7]\"></vl-style-fill>\n          <vl-style-circle :radius=\"5\">\n            <vl-style-stroke color=\"#423e9e\" :width=\"7\"></vl-style-stroke>\n            <vl-style-fill :color=\"[254, 178, 76, 0.7]\"></vl-style-fill>\n          </vl-style-circle>\n        </vl-style-box>\n        <vl-style-box :z-index=\"1\">\n          <vl-style-stroke color=\"#d43f45\" :width=\"2\"></vl-style-stroke>\n          <vl-style-circle :radius=\"5\">\n            <vl-style-stroke color=\"#d43f45\" :width=\"2\"></vl-style-stroke>\n          </vl-style-circle>\n        </vl-style-box>\n        <!--// select styles -->\n\n        <!-- selected feature popup -->\n        <vl-overlay class=\"feature-popup\" v-for=\"feature in select.features\" :key=\"feature.id\" :id=\"feature.id\"\n                    :position=\"pointOnSurface(feature.geometry)\" :auto-pan=\"true\" :auto-pan-animation=\"{ duration: 300 }\">\n          <template slot-scope=\"popup\">\n            <section class=\"card\">\n              <header class=\"card-header\">\n                <p class=\"card-header-title\">\n                  Feature ID {{ feature.id }}\n                </p>\n                <a class=\"card-header-icon\" title=\"Close\"\n                   @click=\"selectedFeatures = selectedFeatures.filter(f => f.id !== feature.id)\">\n                  <b-icon icon=\"close\"></b-icon>\n                </a>\n              </header>\n              <div class=\"card-content\">\n                <div class=\"content\">\n                  <p>\n                    Overlay popup content for Feature with ID <strong>{{ feature.id }}</strong>\n                  </p>\n                  <p>\n                    Popup: {{ JSON.stringify(popup) }}\n                  </p>\n                  <p>\n                    Feature: {{ JSON.stringify({ id: feature.id, properties: feature.properties }) }}\n                  </p>\n                </div>\n              </div>\n            </section>\n          </template>\n        </vl-overlay>\n        <!--// selected popup -->\n      </template>\n    </vl-interaction-select>\n    <!--// interactions -->\n\n    <!-- geolocation -->\n    <vl-geoloc @update:position=\"onUpdatePosition\">\n      <template slot-scope=\"geoloc\">\n        <vl-feature v-if=\"geoloc.position\" id=\"position-feature\">\n          <vl-geom-point :coordinates=\"geoloc.position\"></vl-geom-point>\n          <vl-style-box>\n            <vl-style-icon src=\"./assets/marker.png\" :scale=\"0.4\" :anchor=\"[0.5, 1]\"></vl-style-icon>\n          </vl-style-box>\n        </vl-feature>\n      </template>\n    </vl-geoloc>\n    <!--// geolocation -->\n\n    <!-- overlay marker with animation -->\n    <vl-feature id=\"marker\" ref=\"marker\" :properties=\"{ start: Date.now(), duration: 2500 }\">\n      <template slot-scope=\"feature\">\n        <vl-geom-point :coordinates=\"[ 100.61506779999999, 13.7531888 ]\"></vl-geom-point>\n        <vl-style-box>\n          <vl-style-icon src=\"./assets/flag.png\" :scale=\"0.5\" :anchor=\"[0.1, 0.95]\" :size=\"[128, 128]\"></vl-style-icon>\n        </vl-style-box>\n      \n      </template>\n    </vl-feature>\n    <!--// overlay marker -->\n\n\n    <!-- circle geom -->\n    <vl-feature id=\"circle\">\n      <vl-geom-circle :radius=\"1000000\" :coordinates=\"[0, 30]\"></vl-geom-circle>\n    </vl-feature>\n    <!--// circle geom -->\n\n    <!-- base layers -->\n    <vl-layer-tile v-for=\"layer in baseLayers\" :key=\"layer.name\" :id=\"layer.name\" :visible=\"layer.visible\">\n      <component :is=\"'vl-source-' + layer.name\" v-bind=\"layer\"></component>\n    </vl-layer-tile>\n    <!--// base layers -->\n\n    <!-- other layers from config -->\n    <component v-for=\"layer in layers\" :is=\"layer.cmp\" v-if=\"layer.visible\" :key=\"layer.id\" v-bind=\"layer\">\n      <!-- add vl-source-* -->\n      <component :is=\"layer.source.cmp\" v-bind=\"layer.source\">\n        <!-- add static features to vl-source-vector if provided -->\n        <vl-feature v-if=\"layer.source.staticFeatures && layer.source.staticFeatures.length\"\n                    v-for=\"feature in layer.source.staticFeatures\" :key=\"feature.id\"\n                    :id=\"feature.id\" :properties=\"feature.properties\">\n          <component :is=\"geometryTypeToCmpName(feature.geometry.type)\" v-bind=\"feature.geometry\"></component>\n        </vl-feature>\n\n        <!-- add inner source if provided (like vl-source-vector inside vl-source-cluster) -->\n        <component v-if=\"layer.source.source\" :is=\"layer.source.source.cmp\" v-bind=\"layer.source.source\">\n          <!-- add static features to vl-source-vector if provided -->\n          <vl-feature v-if=\"layer.source.source.staticFeatures && layer.source.source.staticFeatures.length\"\n                      v-for=\"feature in layer.source.source.staticFeatures\" :key=\"feature.id\"\n                      :id=\"feature.id\" :properties=\"feature.properties\">\n            <component :is=\"geometryTypeToCmpName(feature.geometry.type)\" v-bind=\"feature.geometry\"></component>\n          </vl-feature>\n        </component>\n      </component>\n      <!--// vl-source-* -->\n\n      <!-- add style components if provided -->\n      <!-- create vl-style-box or vl-style-func -->\n      <component v-if=\"layer.style\" v-for=\"(style, i) in layer.style\" :key=\"i\" :is=\"style.cmp\" v-bind=\"style\">\n        <!-- create inner style components: vl-style-circle, vl-style-icon, vl-style-fill, vl-style-stroke & etc -->\n        <component v-if=\"style.styles\" v-for=\"(st, cmp) in style.styles\" :key=\"cmp\" :is=\"cmp\" v-bind=\"st\">\n          <!-- vl-style-fill, vl-style-stroke if provided -->\n          <vl-style-fill v-if=\"st.fill\" v-bind=\"st.fill\"></vl-style-fill>\n          <vl-style-stroke v-if=\"st.stroke\" v-bind=\"st.stroke\"></vl-style-stroke>\n        </component>\n      </component>\n      <!--// style -->\n    </component>\n    <!--// other layers -->\n\n    <!-- draw components -->\n    <vl-layer-vector id=\"draw-pane\" v-if=\"mapPanel.tab === 'draw'\">\n      <vl-source-vector ident=\"draw-target\" :features.sync=\"drawnFeatures\"></vl-source-vector>\n    </vl-layer-vector>\n\n    <vl-interaction-draw v-if=\"mapPanel.tab === 'draw' && drawType\" source=\"draw-target\" :type=\"drawType\"></vl-interaction-draw>\n    <vl-interaction-modify v-if=\"mapPanel.tab === 'draw'\" source=\"draw-target\"></vl-interaction-modify>\n    <vl-interaction-snap v-if=\"mapPanel.tab === 'draw'\" source=\"draw-target\" :priority=\"10\"></vl-interaction-snap>\n    <!--// draw components -->\n  </vl-map>\n  <!--// app map -->\n\n  <!-- map panel, controls -->\n  <div class=\"map-panel\">\n    <b-collapse class=\"panel box is-paddingless\" :open.sync=\"panelOpen\">\n      <div slot=\"trigger\" class=\"panel-heading\">\n        <div class=\"columns\">\n          <div class=\"column is-11\">\n            <strong>Map panel</strong>\n          </div>\n          <div class=\"column\">\n            <b-icon :icon=\"panelOpen ? 'chevron-up' : 'chevron-down'\" size=\"is-small\"></b-icon>\n          </div>\n        </div>\n      </div>\n      <p class=\"panel-tabs\">\n        <a @click=\"showMapPanelTab('state')\" :class=\"mapPanelTabClasses('state')\">State</a>\n        <a @click=\"showMapPanelTab('layers')\" :class=\"mapPanelTabClasses('layers')\">Layers</a>\n        <a @click=\"showMapPanelTab('draw')\" :class=\"mapPanelTabClasses('draw')\">Draw</a>\n      </p>\n\n      <div class=\"panel-block\" v-show=\"mapPanel.tab === 'state'\">\n        <table class=\"table is-fullwidth\">\n          <tr>\n            <th>Map center</th>\n            <td>{{ center }}</td>\n          </tr>\n          <tr>\n            <th>Map zoom</th>\n            <td>{{ zoom }}</td>\n          </tr>\n          <tr>\n            <th>Map rotation</th>\n            <td>{{ rotation }}</td>\n          </tr>\n          <tr>\n            <th>Device coordinate</th>\n            <td>{{ deviceCoordinate }}</td>\n          </tr>\n          <tr>\n            <th>Selected features</th>\n            <td>{{ selectedFeatures.map(f => f.id) }}</td>\n          </tr>\n        </table>\n      </div>\n\n      <div class=\"panel-block\" v-for=\"layer in layers\" :key=\"layer.id\" @click=\"showMapPanelLayer\"\n           :class=\"{ 'is-active': layer.visible }\"\n           v-show=\"mapPanel.tab === 'layers'\">\n        <b-switch :key=\"layer.id\" v-model=\"layer.visible\">\n          {{ layer.title }}\n        </b-switch>\n      </div>\n\n      <div class=\"panel-block draw-panel\" v-show=\"mapPanel.tab === 'draw'\">\n        <div class=\"buttons\">\n          <button v-for=\"control in drawControls\" :key=\"control.type || -1\" @click=\"drawType = control.type\"\n                  :class=\"drawType && drawType === control.type ? 'is-info' : ''\" class=\"button\" >\n            <b-icon :icon=\"control.icon\"></b-icon>\n            <span>{{ control.label }}</span>\n          </button>\n        </div>\n      </div>\n    </b-collapse>\n  </div>\n  <!--// map panel, controls -->\n\n  <!-- base layers switch -->\n  <div class=\"base-layers-panel\">\n    <div class=\"buttons has-addons\">\n      <button class=\"button is-light\" v-for=\"layer in baseLayers\"\n              :key=\"layer.name\" :class=\"{ 'is-info': layer.visible }\"\n              @click=\"showBaseLayer(layer.name)\">\n        {{ layer.title }}\n      </button>\n      <button class=\"button is-light\" @click=\"mapVisible = !mapVisible\">\n        {{ mapVisible ? 'Hide map' : 'Show map' }}\n      </button>\n    </div>\n  </div>\n  <!--// base layers -->\n</div>\n",null]}