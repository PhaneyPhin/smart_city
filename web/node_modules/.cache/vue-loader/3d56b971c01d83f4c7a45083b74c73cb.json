{"remainingRequest":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\views\\pages\\ListChartItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\views\\pages\\ListChartItem.vue","mtime":1580809095235},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1579332188909},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1579332241739}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// import * as Highcharts from \"highcharts\";\r\nimport service from \"@/service/service\";\r\nimport Highcharts from 'highcharts'\r\nimport stockInit from 'highcharts/modules/stock'\r\nimport ListCharts from '@/service/chartsOption'\r\n// stockInit(Highcharts)\r\n\r\nstockInit(Highcharts);\r\nexport default {\r\n  props: {\r\n    index: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data: function() {\r\n    return {\r\n      i: 0,\r\n      width: 500,\r\n      height: 400,\r\n      disabled:false,\r\n      x: 0,\r\n      rerender:true,\r\n      y: 300,\r\n      title: this.$store.state.list_charts[this.index].chart_title,\r\n      rerendercomponent: true,\r\n      resize: false,\r\n      array_event:[],\r\n      chartOptions: {}\r\n    };\r\n  },\r\n  computed: {\r\n    styles() {\r\n      return {\r\n        card1: {\r\n          height: this.height + \"px\"\r\n        }\r\n      };\r\n    },\r\n    charts() {\r\n      \r\n      return this.$store.state.list_charts[this.index];\r\n    }\r\n  },\r\n  beforeMount(){\r\n    var chart=this.$store.state.list_charts[this.index];\r\n    this.width=chart.width;\r\n    this.height=chart.height;\r\n  },\r\n  async created() {\r\n      //console.log('compoent created');\r\n      \r\n  },\r\n  async mounted() {\r\n    this.chartOptions={};\r\n    console.log(this.chartOptions);\r\n    //console.log(this.$refs)\r\n    var chart_type_id=this.charts.chart_type_id;\r\n    this.chartOptions={...ListCharts[chart_type_id].option};\r\n    this.rerendercomponent=false;\r\n    this.$nextTick(() => {\r\n        this.rerendercomponent = true;\r\n      });\r\n    var me=this;\r\n    //console.log(chart_type_id)\r\n   if(chart_type_id==0){\r\n        //console.log(1111)\r\n          var connection = new WebSocket(this.$service.socket_host);\r\n          connection.onopen=function(){\r\n                //console.log('connecting')\r\n          }\r\n              connection.onmessage =  (message)=> {\r\n                var data=(JSON.parse(message.data));\r\n                //console.log(data.device_id, data);\r\n                this.charts.series.forEach((item,index)=>{\r\n                  if(item.device_id=='data_test1'){\r\n                    // //console.log(this.chartOptions.device0.series);\r\n                    \r\n                    // this.chartOptions.series[0].data= [[this.chartOptions.series[0].data[0][0]==3?4:3]]\r\n                  }else{\r\n                    //console.log(11);\r\n                   \r\n                  }\r\n                  if(item.device_id==data.device_id){\r\n                    this.chartOptions.series[0].data=[[data[item.column_name]]];\r\n                    console.log('data',this.chartOptions.series[0].data)\r\n                  }else{\r\n\r\n                  }\r\n                })\r\n                // if(data.device_id==item.device_id){\r\n                //   //console.log(item.column_name,data[item.column_name])\r\n                //    me.chartOptions.series[0].data=[[data[item.column_name]]];\r\n                // }\r\n                \r\n               \r\n           \r\n            }\r\n        //  this.charts.series.forEach((item,index)=>{\r\n        //     //console.log(this.$store.state.array_event.indexOf('add'+item.device_id+item.column_name))\r\n        //     var connection = new WebSocket(`${this.$service.socket_host}?device_id=${item.device_id}&columns=${item.column_name}`);\r\n        //       connection.onopen=function(){\r\n        //         //console.log('connecting')\r\n        //       }\r\n        //       connection.onerror = function (error) {\r\n        //         //console.log(`can't connnect to websocket server`);\r\n        //       };\r\n        //       connection.onmessage =  (message)=> {\r\n        //         var data=(JSON.parse(message.data));\r\n        //         //console.log(data.device_id,item.column_name);\r\n        //         if(data.device_id==item.device_id){\r\n        //           //console.log(item.column_name,data[item.column_name])\r\n        //            me.chartOptions.series[0].data=[[data[item.column_name]]];\r\n        //         }\r\n                \r\n               \r\n        //         // point.update(newVal);\r\n        //     }\r\n        //  });\r\n\r\n    }\r\n    \r\n\r\n  },\r\n  beforeDestroy(){\r\n    var array_event=this.array_event;\r\n\r\n  \r\n  },\r\n  methods: {\r\n    onResize: function(x, y, width, height) {\r\n      //console.log({ x, y, width, height });\r\n      if (this.chartOptions.chart == undefined) {\r\n        this.chartOptions.chart = {};\r\n      }\r\n      this.chartOptions.chart.height = height;\r\n      this.rerendercomponent = false;\r\n       var chart={...this.$store.state.list_charts[this.index]};\r\n       chart.width=width;\r\n       chart.height=height;\r\n       chart.x=x;\r\n       chart.y=y;\r\n      this.$store.dispatch('update_list_chart',{\r\n        index:this.index,\r\n        obj:chart\r\n      })\r\n      this.$nextTick(() => {\r\n        this.rerendercomponent = true;\r\n      });\r\n    },\r\n    onDrag: function(x, y) {\r\n      //console.log(x, y);\r\n    },\r\n    onResizeStartCallback(handle, ev) {\r\n      return !this.disabled;\r\n    },\r\n    onDragStartCallback(handle,ev){\r\n      return !this.disabled;\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["ListChartItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ListChartItem.vue","sourceRoot":"src/views/pages","sourcesContent":["<template>\r\n  <vue-draggable-resizable\r\n    :w=\"charts.width\"\r\n    :h=\"charts.height\"\r\n    @dragging=\"onDrag\"\r\n    @resizing=\"onResize\"\r\n    :resizeable=\"resize\"\r\n    :parent=\"false\"\r\n    :onResizeStart=\"onResizeStartCallback\"\r\n    :onDragStart=\"onDragStartCallback\"\r\n  >\r\n    <div class=\"vx-card h-full\">\r\n      <highcharts ref=\"chart\" :key='index' :options=\"chartOptions\" v-if=\"rerendercomponent\"></highcharts>\r\n    </div>\r\n  </vue-draggable-resizable>\r\n</template>\r\n\r\n<script>\r\n// import * as Highcharts from \"highcharts\";\r\nimport service from \"@/service/service\";\r\nimport Highcharts from 'highcharts'\r\nimport stockInit from 'highcharts/modules/stock'\r\nimport ListCharts from '@/service/chartsOption'\r\n// stockInit(Highcharts)\r\n\r\nstockInit(Highcharts);\r\nexport default {\r\n  props: {\r\n    index: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data: function() {\r\n    return {\r\n      i: 0,\r\n      width: 500,\r\n      height: 400,\r\n      disabled:false,\r\n      x: 0,\r\n      rerender:true,\r\n      y: 300,\r\n      title: this.$store.state.list_charts[this.index].chart_title,\r\n      rerendercomponent: true,\r\n      resize: false,\r\n      array_event:[],\r\n      chartOptions: {}\r\n    };\r\n  },\r\n  computed: {\r\n    styles() {\r\n      return {\r\n        card1: {\r\n          height: this.height + \"px\"\r\n        }\r\n      };\r\n    },\r\n    charts() {\r\n      \r\n      return this.$store.state.list_charts[this.index];\r\n    }\r\n  },\r\n  beforeMount(){\r\n    var chart=this.$store.state.list_charts[this.index];\r\n    this.width=chart.width;\r\n    this.height=chart.height;\r\n  },\r\n  async created() {\r\n      //console.log('compoent created');\r\n      \r\n  },\r\n  async mounted() {\r\n    this.chartOptions={};\r\n    console.log(this.chartOptions);\r\n    //console.log(this.$refs)\r\n    var chart_type_id=this.charts.chart_type_id;\r\n    this.chartOptions={...ListCharts[chart_type_id].option};\r\n    this.rerendercomponent=false;\r\n    this.$nextTick(() => {\r\n        this.rerendercomponent = true;\r\n      });\r\n    var me=this;\r\n    //console.log(chart_type_id)\r\n   if(chart_type_id==0){\r\n        //console.log(1111)\r\n          var connection = new WebSocket(this.$service.socket_host);\r\n          connection.onopen=function(){\r\n                //console.log('connecting')\r\n          }\r\n              connection.onmessage =  (message)=> {\r\n                var data=(JSON.parse(message.data));\r\n                //console.log(data.device_id, data);\r\n                this.charts.series.forEach((item,index)=>{\r\n                  if(item.device_id=='data_test1'){\r\n                    // //console.log(this.chartOptions.device0.series);\r\n                    \r\n                    // this.chartOptions.series[0].data= [[this.chartOptions.series[0].data[0][0]==3?4:3]]\r\n                  }else{\r\n                    //console.log(11);\r\n                   \r\n                  }\r\n                  if(item.device_id==data.device_id){\r\n                    this.chartOptions.series[0].data=[[data[item.column_name]]];\r\n                    console.log('data',this.chartOptions.series[0].data)\r\n                  }else{\r\n\r\n                  }\r\n                })\r\n                // if(data.device_id==item.device_id){\r\n                //   //console.log(item.column_name,data[item.column_name])\r\n                //    me.chartOptions.series[0].data=[[data[item.column_name]]];\r\n                // }\r\n                \r\n               \r\n           \r\n            }\r\n        //  this.charts.series.forEach((item,index)=>{\r\n        //     //console.log(this.$store.state.array_event.indexOf('add'+item.device_id+item.column_name))\r\n        //     var connection = new WebSocket(`${this.$service.socket_host}?device_id=${item.device_id}&columns=${item.column_name}`);\r\n        //       connection.onopen=function(){\r\n        //         //console.log('connecting')\r\n        //       }\r\n        //       connection.onerror = function (error) {\r\n        //         //console.log(`can't connnect to websocket server`);\r\n        //       };\r\n        //       connection.onmessage =  (message)=> {\r\n        //         var data=(JSON.parse(message.data));\r\n        //         //console.log(data.device_id,item.column_name);\r\n        //         if(data.device_id==item.device_id){\r\n        //           //console.log(item.column_name,data[item.column_name])\r\n        //            me.chartOptions.series[0].data=[[data[item.column_name]]];\r\n        //         }\r\n                \r\n               \r\n        //         // point.update(newVal);\r\n        //     }\r\n        //  });\r\n\r\n    }\r\n    \r\n\r\n  },\r\n  beforeDestroy(){\r\n    var array_event=this.array_event;\r\n\r\n  \r\n  },\r\n  methods: {\r\n    onResize: function(x, y, width, height) {\r\n      //console.log({ x, y, width, height });\r\n      if (this.chartOptions.chart == undefined) {\r\n        this.chartOptions.chart = {};\r\n      }\r\n      this.chartOptions.chart.height = height;\r\n      this.rerendercomponent = false;\r\n       var chart={...this.$store.state.list_charts[this.index]};\r\n       chart.width=width;\r\n       chart.height=height;\r\n       chart.x=x;\r\n       chart.y=y;\r\n      this.$store.dispatch('update_list_chart',{\r\n        index:this.index,\r\n        obj:chart\r\n      })\r\n      this.$nextTick(() => {\r\n        this.rerendercomponent = true;\r\n      });\r\n    },\r\n    onDrag: function(x, y) {\r\n      //console.log(x, y);\r\n    },\r\n    onResizeStartCallback(handle, ev) {\r\n      return !this.disabled;\r\n    },\r\n    onDragStartCallback(handle,ev){\r\n      return !this.disabled;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.vdr {\r\n  -ms-touch-action: none;\r\n  touch-action: none;\r\n  border: none;\r\n}\r\n</style>\r\n"]}]}