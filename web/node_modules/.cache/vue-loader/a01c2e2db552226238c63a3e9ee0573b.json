{"remainingRequest":"C:\\Users\\Sovannarith Phan\\smart_city\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sovannarith Phan\\smart_city\\web\\src\\views\\components\\extra-components\\tree\\TreeAsyncTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Sovannarith Phan\\smart_city\\web\\src\\views\\components\\extra-components\\tree\\TreeAsyncTree.vue","mtime":1579316688000},{"path":"C:\\Users\\Sovannarith Phan\\smart_city\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\smart_city\\web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1579332188909},{"path":"C:\\Users\\Sovannarith Phan\\smart_city\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\smart_city\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1579332241739}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { VTree, VSelectTree}  from 'vue-tree-halower'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      initSelected: ['node-1'],\r\n      treeData: [{\r\n        title: 'node1',\r\n        expanded: false,\r\n        async: true\r\n      }]\r\n    }\r\n  },\r\n  methods: {\r\n    nodechecked (node, v) {\r\n      alert('that a node-check envent ...' + node.title + v)\r\n    },\r\n    async asyncLoad (node) {\r\n      const {checked = false} = node\r\n      this.$set(node, 'loading', true)\r\n      let pro = await new Promise(resolve => {\r\n        setTimeout(resolve, 2000, [{title: 'test1', async: true}, {title: 'test2', async: true}, {title: 'test3'}])\r\n      })\r\n      if (!node.hasOwnProperty('children')) {\r\n        this.$set(node, 'children', [])\r\n      }\r\n      node.children.push(...pro)\r\n      this.$set(node, 'loading', false)\r\n      if (checked) {\r\n        this.$refs.tree.childCheckedHandle(node, checked)\r\n      }\r\n    },\r\n  },\r\n  components: {\r\n    VTree,\r\n    VSelectTree\r\n  }\r\n}\r\n",{"version":3,"sources":["TreeAsyncTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TreeAsyncTree.vue","sourceRoot":"src/views/components/extra-components/tree","sourcesContent":["<template>\r\n  <vx-card title=\"Async Tree\" code-toggler>\r\n    <v-tree ref=\"tree\" :data='treeData' :multiple='false' @node-check='nodechecked' @async-load-nodes='asyncLoad'/>\r\n\r\n    <template slot=\"codeContainer\">\r\n&lt;tempalte&gt;\r\n  &lt;v-tree ref=&quot;tree&quot; :data=&apos;treeData&apos; :multiple=&apos;false&apos; @node-check=&apos;nodechecked&apos; @async-load-nodes=&apos;asyncLoad&apos;/&gt;\r\n&lt;/tempalte&gt;\r\n\r\n&lt;script&gt;\r\nimport { VTree, VSelectTree}  from &apos;vue-tree-halower&apos;\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      initSelected: [&apos;node-1&apos;],\r\n      treeData: [{\r\n        title: &apos;node1&apos;,\r\n        expanded: false,\r\n        async: true\r\n      }]\r\n    }\r\n  },\r\n  methods: {\r\n    nodechecked (node, v) {\r\n      alert(&apos;that a node-check envent ...&apos; + node.title + v)\r\n    },\r\n    async asyncLoad (node) {\r\n      const {checked = false} = node\r\n      this.$set(node, &apos;loading&apos;, true)\r\n      let pro = await new Promise(resolve =&gt; {\r\n        setTimeout(resolve, 2000, [{title: &apos;test1&apos;, async: true}, {title: &apos;test2&apos;, async: true}, {title: &apos;test3&apos;}])\r\n      })\r\n      if (!node.hasOwnProperty(&apos;children&apos;)) {\r\n        this.$set(node, &apos;children&apos;, [])\r\n      }\r\n      node.children.push(...pro)\r\n      this.$set(node, &apos;loading&apos;, false)\r\n      if (checked) {\r\n        this.$refs.tree.childCheckedHandle(node, checked)\r\n      }\r\n    },\r\n  },\r\n  components: {\r\n    VTree,\r\n    VSelectTree\r\n  }\r\n}\r\n&lt;/script&gt;\r\n    </template>\r\n  </vx-card>\r\n</template>\r\n\r\n<script>\r\nimport { VTree, VSelectTree}  from 'vue-tree-halower'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      initSelected: ['node-1'],\r\n      treeData: [{\r\n        title: 'node1',\r\n        expanded: false,\r\n        async: true\r\n      }]\r\n    }\r\n  },\r\n  methods: {\r\n    nodechecked (node, v) {\r\n      alert('that a node-check envent ...' + node.title + v)\r\n    },\r\n    async asyncLoad (node) {\r\n      const {checked = false} = node\r\n      this.$set(node, 'loading', true)\r\n      let pro = await new Promise(resolve => {\r\n        setTimeout(resolve, 2000, [{title: 'test1', async: true}, {title: 'test2', async: true}, {title: 'test3'}])\r\n      })\r\n      if (!node.hasOwnProperty('children')) {\r\n        this.$set(node, 'children', [])\r\n      }\r\n      node.children.push(...pro)\r\n      this.$set(node, 'loading', false)\r\n      if (checked) {\r\n        this.$refs.tree.childCheckedHandle(node, checked)\r\n      }\r\n    },\r\n  },\r\n  components: {\r\n    VTree,\r\n    VSelectTree\r\n  }\r\n}\r\n</script>\r\n"]}]}