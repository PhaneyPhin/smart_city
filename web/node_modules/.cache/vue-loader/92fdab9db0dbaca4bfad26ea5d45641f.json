{"remainingRequest":"D:\\DTC PROJECT\\booking\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\DTC PROJECT\\booking\\web\\src\\views\\Schedule1.vue?vue&type=template&id=a45c8aa0&","dependencies":[{"path":"D:\\DTC PROJECT\\booking\\web\\src\\views\\Schedule1.vue","mtime":1576910008806},{"path":"D:\\DTC PROJECT\\booking\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DTC PROJECT\\booking\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\DTC PROJECT\\booking\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DTC PROJECT\\booking\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n  <div class=\"w-full mb-base\">\n    <vx-card>\n      <h6>{{ $t(\"Activity Of Each Room\") }}</h6>\n      <div class=\"vx-row mb-10\">\n        <div class=\"vx-col md:w-1/3 mt-6\">\n          <label>{{ $t(\"Building\") }}</label>\n          <vs-select\n            class=\"w-full\"\n            v-model=\"editObj.building_id\"\n            :danger=\"invalid.building_id\"\n          >\n            <vs-select-item\n              :key=\"index\"\n              :value=\"item.building_id\"\n              :text=\"$t(item.building_name)\"\n              v-for=\"(item, index) in buildings\"\n            />\n          </vs-select>\n          <div class=\"errors\" v-if=\"invalid.building_id\">\n            {{ $t(\"please select the buildign\") }}\n          </div>\n        </div>\n        <div class=\"vx-col md:w-1/3 mt-6\">\n          <label>{{ $t(\"room\") }}</label>\n          <vs-select\n            class=\"w-full\"\n            v-model=\"editObj.room_id\"\n            :danger=\"invalid.room_id\"\n          >\n            <vs-select-item\n              :key=\"index\"\n              :value=\"item.room_id\"\n              :text=\"$t(item.room_name)\"\n              v-for=\"(item, index) in rooms\"\n            />\n          </vs-select>\n          <div class=\"errors\" v-if=\"invalid.room_id\">\n            {{ $t(\"please select the room_id\") }}\n          </div>\n        </div>\n        <div class=\"vx-col md:w-1/3 mt-6\">\n          <vs-button\n            ref=\"loadableButton\"\n            id=\"button-with-loading\"\n            class=\"vs-con-loading__container mt-5\"\n            vslor=\"primary\"\n            @click=\"search()\"\n            >{{ $t(\"search\") }}</vs-button\n          >\n        </div>\n      </div>\n      <JqxScheduler v-if=\"rerender\" ref=\"myScheduler\" :date=\"date\" width=\"100%\"\n      :source=\"source\" :view=\"'weekView'\" :showLegend=\"true\"\n      :resources=\"resources\" :appointmentDataFields=\"appointmentDataFields\"\n      :views=\"views\" :editDialogOpen=\"editDialogOpen\" :disabled=\"false\"\n      :theme=\"'material' />\n    </vx-card>\n  </div>\n</template>\n<style scoped>\n.jqx-fill-state-disabled {\n  cursor: default;\n  color: #000;\n  opacity: 1;\n  filter: Alpha(Opacity=45);\n}\n</style>\n<script>\nimport JqxScheduler from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxscheduler.vue\";\nimport service from \"@/service/service\";\nimport { async } from \"q\";\nimport moment from \"moment\";\nexport default {\n  components: {\n    JqxScheduler\n  },\n  data: function() {\n    return {\n      rerender: false,\n      submitted: false,\n      editObj: { building_id: \"\", room_id: \"\" },\n      buildings: [],\n      rooms: [],\n      date: new jqx.date(),\n      source: new jqx.dataAdapter(this.source),\n      resources: {\n        colorScheme: \"scheme05\",\n        dataField: \"calendar\",\n        source: new jqx.dataAdapter(this.source)\n      },\n      appointmentDataFields: {\n        from: \"start\",\n        to: \"end\",\n        id: \"id\",\n        description: \"description\",\n        location: \"place\",\n        subject: \"subject\",\n        resourceId: \"calendar\",\n        background: \"background\"\n      },\n      views: [\"dayView\", \"weekView\", \"monthView\", \"agendaView\"]\n    };\n  },\n  beforeCreate: async function() {\n    this.editObj = { building_id: \"\", room_id: \"\" };\n    var appointments = new Array();\n\n    this.source = {\n      dataType: \"array\",\n      dataFields: [\n        { name: \"id\", type: \"string\" },\n        { name: \"description\", type: \"string\" },\n        { name: \"location\", type: \"string\" },\n        { name: \"subject\", type: \"string\" },\n        { name: \"calendar\", type: \"string\" },\n        { name: \"start\", type: \"date\" },\n        { name: \"end\", type: \"date\" },\n        { name: \"background\", type: \"string\" }\n      ],\n      id: \"id\",\n      localData: appointments\n    };\n  },\n  async created() {\n    var result = await service.postData(\"building/getBuilding\", {});\n    this.buildings = result.data;\n  },\n  computed: {\n    invalid() {\n      var require = x => this.editObj[x] == \"\" && this.submitted;\n      return {\n        building_id: require(\"building_id\"),\n        room_id: require(\"room_id\")\n      };\n    },\n    isInvalid() {\n      return this.invalid.building_id || this.invalid.room_id;\n    }\n  },\n  mounted: function() {\n    var appointments = new Array();\n    this.schedule(appointments);\n  },\n  methods: {\n    editDialogOpen: function(dialog, fields, editAppointment) {\n      // this.$refs.myScheduler(\"closeDialog\");\n    },\n    serperateDate(date) {\n      var year = moment(date, \"YYYY-MM-DD HH:mm:ss\").years();\n      var month = moment(date, \"YYYY-MM-DD HH:mm:ss\").months();\n      var day = moment(date, \"YYYY-MM-DD HH:mm:ss\").dates();\n      var hour = moment(date, \"YYYY-MM-DD HH:mm:ss\").hours();\n      var minute = moment(date, \"YYYY-MM-DD HH:mm:ss\").minutes();\n      var second = moment(date, \"YYYY-MM-DD HH:mm:ss\").seconds();\n      return new Date(year, month, day, hour, minute, second);\n    },\n    async search() {\n      this.submitted = true;\n      if (!this.isInvalid) {\n        var respose = await service.postData(\"get_room_booking\", this.editObj);\n        var bookings = respose.data;\n        var appointments = new Array();\n        bookings.forEach(data => {\n          // var { year, month, day, hour, minute, second } = this.serperateDate(\n          //   data.start_date\n          // );\n          // var start_date = new Date(year, month, day, hour, minute, second);\n          // var end = this.serperateDate(\n          //   data.end_date\n          // );\n          // var end_date = new Date(year, month, day, hour, minute, second);\n          appointments.push({\n            id: \"id3\",\n            subject:\n              data.first_name + \" \" + data.last_name + \" : \" + data.subject,\n            calendar: this.editObj.room_id,\n            start: this.serperateDate(data.start_date),\n            end: this.serperateDate(data.end_date),\n            background: \"#00FF00\"\n          });\n        });\n        console.log(appointments);\n        this.schedule(appointments);\n      }\n    },\n    schedule(data) {\n      this.rerender = false;\n      this.$nextTick(() => {\n        this.rerender = true;\n        this.source = {\n          dataType: \"array\",\n          dataFields: [\n            { name: \"id\", type: \"string\" },\n            { name: \"description\", type: \"string\" },\n            { name: \"location\", type: \"string\" },\n            { name: \"subject\", type: \"string\" },\n            { name: \"calendar\", type: \"string\" },\n            { name: \"start\", type: \"date\" },\n            { name: \"end\", type: \"date\" },\n            { background: \"background\" }\n          ],\n          id: \"id\",\n          localData: data\n        };\n        this.ource = new jqx.dataAdapter(this.source);\n        this.resources = {\n          colorScheme: \"scheme05\",\n          dataField: \"calendar\",\n          source: new jqx.dataAdapter(this.source)\n        };\n        this.$nextTick(() => {\n          this.$refs.myScheduler.ensureAppointmentVisible(\"id1\");\n        });\n      });\n    }\n  },\n  watch: {\n    async \"editObj.building_id\"(val) {\n      this.editObj.room_id = \"\";\n\n      var result = await service.postData(\"getRoomByBuilding\", {\n        building_id: this.editObj.building_id\n      });\n      this.rooms = result.data;\n    }\n  }\n};\n</script>\n",null]}