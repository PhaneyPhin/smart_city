{"remainingRequest":"D:\\DTC PROJECT\\booking\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\DTC PROJECT\\booking\\web\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\DTC PROJECT\\booking\\web\\src\\App.vue","mtime":1578637925936},{"path":"D:\\DTC PROJECT\\booking\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DTC PROJECT\\booking\\web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DTC PROJECT\\booking\\web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\DTC PROJECT\\booking\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DTC PROJECT\\booking\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport themeConfig from \"@/../themeConfig.js\";\nimport service from \"@/service/service\";\nexport default {\n  watch: {\n    \"$store.state.theme\"(val) {\n      this.toggleClassInBody(val);\n    }\n  },\n  async created() {\n    var user = service.getUser().user;\n    var img_profile =\n      localStorage.getItem(\"img_profile\") != undefined\n        ? localStorage.getItem(\"img_profile\")\n        : \"\";\n    console.log(\"img_profile\", img_profile);\n    this.$store.dispatch(\"setProfile\", img_profile);\n    var dispalyUser =\n      localStorage.getItem(\"dispalyUser\") != undefined\n        ? localStorage.getItem(\"dispalyUser\")\n        : \"\";\n    console.log(\"dispalyUser\", dispalyUser);\n    this.$store.dispatch(\"setDisplayUsername\", dispalyUser);\n    if (user != \"\") {\n      if (user.role_name) {\n        var { role_name } = service.getUser().user;\n        this.$store.dispatch(\"updateUserRole\", role_name);\n        this.$acl.change(role_name);\n      } else {\n        this.$store.dispatch(\"updateUserRole\", \"public\");\n        this.$acl.change(\"public\");\n      }\n    } else {\n      this.$store.dispatch(\"updateUserRole\", \"public\");\n      this.$acl.change(\"public\");\n    }\n    // this.$acl.change(\"public\");\n    try {\n      await this.$auth.renewTokens();\n    } catch (e) {\n      console.log(e);\n    }\n  },\n  methods: {\n    toggleClassInBody(className) {\n      if (className == \"dark\") {\n        if (document.body.className.match(\"theme-semi-dark\"))\n          document.body.classList.remove(\"theme-semi-dark\");\n        document.body.classList.add(\"theme-dark\");\n      } else if (className == \"semi-dark\") {\n        if (document.body.className.match(\"theme-dark\"))\n          document.body.classList.remove(\"theme-dark\");\n        document.body.classList.add(\"theme-semi-dark\");\n      } else {\n        if (document.body.className.match(\"theme-dark\"))\n          document.body.classList.remove(\"theme-dark\");\n        if (document.body.className.match(\"theme-semi-dark\"))\n          document.body.classList.remove(\"theme-semi-dark\");\n      }\n    },\n    handleWindowResize(event) {\n      this.$store.dispatch(\"updateWindowWidth\", event.currentTarget.innerWidth);\n    }\n  },\n  mounted() {\n    this.toggleClassInBody(themeConfig.theme);\n    this.$nextTick(() => {\n      window.addEventListener(\"resize\", this.handleWindowResize);\n    });\n    this.$store.dispatch(\"updateWindowWidth\", window.innerWidth);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n  }\n};\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<!-- =========================================================================================\n\tFile Name: App.vue\n\tDescription: Main vue file - APP\n\t----------------------------------------------------------------------------------------\n\tItem Name: Vuesax Admin - VueJS Dashboard Admin Template\n\tAuthor: Pixinvent\n\tAuthor URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n<template>\n  <div id=\"app\">\n    <router-view></router-view>\n  </div>\n</template>\n\n<script>\nimport themeConfig from \"@/../themeConfig.js\";\nimport service from \"@/service/service\";\nexport default {\n  watch: {\n    \"$store.state.theme\"(val) {\n      this.toggleClassInBody(val);\n    }\n  },\n  async created() {\n    var user = service.getUser().user;\n    var img_profile =\n      localStorage.getItem(\"img_profile\") != undefined\n        ? localStorage.getItem(\"img_profile\")\n        : \"\";\n    console.log(\"img_profile\", img_profile);\n    this.$store.dispatch(\"setProfile\", img_profile);\n    var dispalyUser =\n      localStorage.getItem(\"dispalyUser\") != undefined\n        ? localStorage.getItem(\"dispalyUser\")\n        : \"\";\n    console.log(\"dispalyUser\", dispalyUser);\n    this.$store.dispatch(\"setDisplayUsername\", dispalyUser);\n    if (user != \"\") {\n      if (user.role_name) {\n        var { role_name } = service.getUser().user;\n        this.$store.dispatch(\"updateUserRole\", role_name);\n        this.$acl.change(role_name);\n      } else {\n        this.$store.dispatch(\"updateUserRole\", \"public\");\n        this.$acl.change(\"public\");\n      }\n    } else {\n      this.$store.dispatch(\"updateUserRole\", \"public\");\n      this.$acl.change(\"public\");\n    }\n    // this.$acl.change(\"public\");\n    try {\n      await this.$auth.renewTokens();\n    } catch (e) {\n      console.log(e);\n    }\n  },\n  methods: {\n    toggleClassInBody(className) {\n      if (className == \"dark\") {\n        if (document.body.className.match(\"theme-semi-dark\"))\n          document.body.classList.remove(\"theme-semi-dark\");\n        document.body.classList.add(\"theme-dark\");\n      } else if (className == \"semi-dark\") {\n        if (document.body.className.match(\"theme-dark\"))\n          document.body.classList.remove(\"theme-dark\");\n        document.body.classList.add(\"theme-semi-dark\");\n      } else {\n        if (document.body.className.match(\"theme-dark\"))\n          document.body.classList.remove(\"theme-dark\");\n        if (document.body.className.match(\"theme-semi-dark\"))\n          document.body.classList.remove(\"theme-semi-dark\");\n      }\n    },\n    handleWindowResize(event) {\n      this.$store.dispatch(\"updateWindowWidth\", event.currentTarget.innerWidth);\n    }\n  },\n  mounted() {\n    this.toggleClassInBody(themeConfig.theme);\n    this.$nextTick(() => {\n      window.addEventListener(\"resize\", this.handleWindowResize);\n    });\n    this.$store.dispatch(\"updateWindowWidth\", window.innerWidth);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n  }\n};\n</script>\n"]}]}