{"remainingRequest":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\store\\auth\\moduleAuthActions.js","dependencies":[{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\store\\auth\\moduleAuthActions.js","mtime":1579316682000},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579332194156},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1579332188909},{"path":"C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\node_modules\\eslint-loader\\index.js","mtime":1579332204667}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.assign\";\n\n/*=========================================================================================\r\n  File Name: moduleAuthActions.js\r\n  Description: Auth Module Actions\r\n  ----------------------------------------------------------------------------------------\r\n  Item Name: Vuesax Admin - VueJS Dashboard Admin Template\r\n  Author: Pixinvent\r\n  Author URL: http://www.themeforest.net/user/pixinvent\r\n==========================================================================================*/\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport router from '@/router';\nexport default {\n  loginAttempt: function loginAttempt(_ref, payload) {\n    var dispatch = _ref.dispatch;\n    // New payload for login action\n    var newPayload = {\n      userDetails: payload.userDetails,\n      notify: payload.notify // If remember_me is enabled change firebase Persistence\n\n    };\n\n    if (!payload.checkbox_remember_me) {\n      // Change firebase Persistence\n      firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION) // If success try to login\n      .then(function () {\n        dispatch('login', newPayload);\n      }) // If error notify\n      .catch(function (err) {\n        payload.notify({\n          time: 2500,\n          title: 'Error',\n          text: err.message,\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'danger'\n        });\n      });\n    } else {\n      // Try to login\n      dispatch('login', newPayload);\n    }\n  },\n  login: function login(_ref2, payload) {\n    var commit = _ref2.commit,\n        state = _ref2.state,\n        dispatch = _ref2.dispatch;\n\n    // If user is already logged in notify and exit\n    if (state.isUserLoggedIn()) {\n      payload.notify({\n        title: 'Login Attempt',\n        text: 'You are already logged in!',\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'warning'\n      });\n      return false;\n    } // Try to sigin\n\n\n    firebase.auth().signInWithEmailAndPassword(payload.userDetails.email, payload.userDetails.password).then(function (result) {\n      // Set FLAG username update required for updating username\n      var isUsernameUpdateRequired = false; // if username is provided and updateUsername FLAG is true\n      // set local username update FLAG to true\n      // try to update username\n\n      if (payload.updateUsername && payload.userDetails.username) {\n        isUsernameUpdateRequired = true;\n        dispatch('updateUsername', {\n          user: result.user,\n          username: payload.userDetails.username,\n          notify: payload.notify,\n          isReloadRequired: true\n        });\n      } // if username update is not required\n      // just reload the page to get fresh data\n      // set new user data in localstorage\n\n\n      if (!isUsernameUpdateRequired) {\n        router.push(router.currentRoute.query.to || '/');\n        commit('UPDATE_AUTHENTICATED_USER', result.user.providerData[0]);\n      }\n    }, function (err) {\n      payload.notify({\n        time: 2500,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  // Google Login\n  loginWithGoogle: function loginWithGoogle(_ref3, payload) {\n    var commit = _ref3.commit,\n        state = _ref3.state;\n\n    if (state.isUserLoggedIn()) {\n      payload.notify({\n        title: 'Login Attempt',\n        text: 'You are already logged in!',\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'warning'\n      });\n      return false;\n    }\n\n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider).then(function (result) {\n      router.push(router.currentRoute.query.to || '/');\n      commit('UPDATE_AUTHENTICATED_USER', result.user.providerData[0]);\n    }).catch(function (err) {\n      payload.notify({\n        time: 2500,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    }); // firebase.auth().onAuthStateChanged(function(user) {\n    //     if (user) {\n    //         user.updateProfile({\n    //             roles: ['admin'],\n    //         }).then(function() {\n    //             this.$vs.notify({\n    //                 title: 'Success',\n    //                 text: \"done\",\n    //                 iconPack: 'feather',\n    //                 icon: 'icon-check',\n    //                 color: 'success'\n    //             });\n    //         }, function(error) {\n    //             this.$vs.notify({\n    //                 title: 'Error',\n    //                 text: error.message,\n    //                 iconPack: 'feather',\n    //                 icon: 'icon-alert-circle',\n    //                 color: 'danger'\n    //             });\n    //         });\n    //     }\n    // });\n  },\n  // Facebook Login\n  loginWithFacebook: function loginWithFacebook(_ref4, payload) {\n    var commit = _ref4.commit,\n        state = _ref4.state;\n\n    if (state.isUserLoggedIn()) {\n      payload.notify({\n        title: 'Login Attempt',\n        text: 'You are already logged in!',\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'warning'\n      });\n      return false;\n    }\n\n    var provider = new firebase.auth.FacebookAuthProvider();\n    firebase.auth().signInWithPopup(provider).then(function (result) {\n      router.push(router.currentRoute.query.to || '/');\n      commit('UPDATE_AUTHENTICATED_USER', result.user.providerData[0]);\n    }).catch(function (err) {\n      payload.notify({\n        time: 2500,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  // Twitter Login\n  loginWithTwitter: function loginWithTwitter(_ref5, payload) {\n    var commit = _ref5.commit,\n        state = _ref5.state;\n\n    if (state.isUserLoggedIn()) {\n      payload.notify({\n        title: 'Login Attempt',\n        text: 'You are already logged in!',\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'warning'\n      });\n      return false;\n    }\n\n    var provider = new firebase.auth.TwitterAuthProvider();\n    firebase.auth().signInWithPopup(provider).then(function (result) {\n      router.push(router.currentRoute.query.to || '/');\n      commit('UPDATE_AUTHENTICATED_USER', result.user.providerData[0]);\n    }).catch(function (err) {\n      payload.notify({\n        time: 2500,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  // Github Login\n  loginWithGithub: function loginWithGithub(_ref6, payload) {\n    var commit = _ref6.commit,\n        state = _ref6.state;\n\n    if (state.isUserLoggedIn()) {\n      payload.notify({\n        title: 'Login Attempt',\n        text: 'You are already logged in!',\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'warning'\n      });\n      return false;\n    }\n\n    var provider = new firebase.auth.GithubAuthProvider();\n    firebase.auth().signInWithPopup(provider).then(function (result) {\n      router.push(router.currentRoute.query.to || '/');\n      commit('UPDATE_AUTHENTICATED_USER', result.user.providerData[0]);\n    }).catch(function (err) {\n      payload.notify({\n        time: 2500,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  registerUser: function registerUser(_ref7, payload) {\n    var dispatch = _ref7.dispatch;\n    // create user using firebase\n    firebase.auth().createUserWithEmailAndPassword(payload.userDetails.email, payload.userDetails.password).then(function () {\n      payload.notify({\n        title: 'Account Created',\n        text: 'You are successfully registered!',\n        iconPack: 'feather',\n        icon: 'icon-check',\n        color: 'success'\n      });\n      var newPayload = {\n        userDetails: payload.userDetails,\n        notify: payload.notify,\n        updateUsername: true\n      };\n      dispatch('login', newPayload);\n    }, function (error) {\n      payload.notify({\n        title: 'Error',\n        text: error.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  updateUsername: function updateUsername(_ref8, payload) {\n    var commit = _ref8.commit;\n    payload.user.updateProfile({\n      displayName: payload.username\n    }).then(function () {\n      // If username update is success\n      // update in localstorage\n      var newUserData = Object.assign({}, payload.user.providerData[0]);\n      newUserData.displayName = payload.username;\n      commit('UPDATE_AUTHENTICATED_USER', newUserData); // If reload is required to get fresh data after update\n      // Reload current page\n\n      if (payload.isReloadRequired) {\n        router.push(router.currentRoute.query.to || '/');\n      }\n    }).catch(function (err) {\n      payload.notify({\n        time: 8800,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  updateAuthenticatedUser: function updateAuthenticatedUser(_ref9, payload) {\n    var commit = _ref9.commit;\n    commit('UPDATE_AUTHENTICATED_USER', payload);\n  }\n};",{"version":3,"sources":["C:\\Users\\Sovannarith Phan\\Utility_Website\\web\\src\\store\\auth\\moduleAuthActions.js"],"names":["firebase","router","loginAttempt","payload","dispatch","newPayload","userDetails","notify","checkbox_remember_me","auth","setPersistence","Auth","Persistence","SESSION","then","catch","err","time","title","text","message","iconPack","icon","color","login","commit","state","isUserLoggedIn","signInWithEmailAndPassword","email","password","result","isUsernameUpdateRequired","updateUsername","username","user","isReloadRequired","push","currentRoute","query","to","providerData","loginWithGoogle","provider","GoogleAuthProvider","signInWithPopup","loginWithFacebook","FacebookAuthProvider","loginWithTwitter","TwitterAuthProvider","loginWithGithub","GithubAuthProvider","registerUser","createUserWithEmailAndPassword","error","updateProfile","displayName","newUserData","Object","assign","updateAuthenticatedUser"],"mappings":"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","sourcesContent":["/*=========================================================================================\r\n  File Name: moduleAuthActions.js\r\n  Description: Auth Module Actions\r\n  ----------------------------------------------------------------------------------------\r\n  Item Name: Vuesax Admin - VueJS Dashboard Admin Template\r\n  Author: Pixinvent\r\n  Author URL: http://www.themeforest.net/user/pixinvent\r\n==========================================================================================*/\r\n\r\n\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport router from '@/router'\r\n\r\nexport default {\r\n    loginAttempt({ dispatch }, payload) {\r\n\r\n        // New payload for login action\r\n        const newPayload = {\r\n            userDetails: payload.userDetails,\r\n            notify: payload.notify\r\n        }\r\n\r\n        // If remember_me is enabled change firebase Persistence\r\n        if (!payload.checkbox_remember_me) {\r\n\r\n            // Change firebase Persistence\r\n            firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)\r\n\r\n                // If success try to login\r\n                .then(function() {\r\n                    dispatch('login', newPayload)\r\n                })\r\n\r\n                // If error notify\r\n                .catch(function(err) {\r\n                    payload.notify({\r\n                        time: 2500,\r\n                        title: 'Error',\r\n                        text: err.message,\r\n                        iconPack: 'feather',\r\n                        icon: 'icon-alert-circle',\r\n                        color: 'danger'\r\n                    });\r\n                });\r\n        } else {\r\n            // Try to login\r\n            dispatch('login', newPayload)\r\n        }\r\n    },\r\n    login({ commit, state, dispatch }, payload) {\r\n\r\n        // If user is already logged in notify and exit\r\n        if (state.isUserLoggedIn()) {\r\n            payload.notify({\r\n                title: 'Login Attempt',\r\n                text: 'You are already logged in!',\r\n                iconPack: 'feather',\r\n                icon: 'icon-alert-circle',\r\n                color: 'warning'\r\n            });\r\n            return false\r\n        }\r\n\r\n        // Try to sigin\r\n        firebase.auth().signInWithEmailAndPassword(payload.userDetails.email, payload.userDetails.password)\r\n\r\n            .then((result) => {\r\n\r\n                // Set FLAG username update required for updating username\r\n                let isUsernameUpdateRequired = false;\r\n\r\n                // if username is provided and updateUsername FLAG is true\r\n                  // set local username update FLAG to true\r\n                  // try to update username\r\n                if(payload.updateUsername && payload.userDetails.username) {\r\n\r\n                    isUsernameUpdateRequired = true;\r\n\r\n                    dispatch('updateUsername', {\r\n                      user: result.user,\r\n                      username: payload.userDetails.username,\r\n                      notify: payload.notify,\r\n                      isReloadRequired: true\r\n                    })\r\n                }\r\n\r\n                // if username update is not required\r\n                  // just reload the page to get fresh data\r\n                  // set new user data in localstorage\r\n                if(!isUsernameUpdateRequired) {\r\n                  router.push(router.currentRoute.query.to || '/');\r\n                  commit('UPDATE_AUTHENTICATED_USER', result.user.providerData[0])\r\n                }\r\n            }, (err) => {\r\n                payload.notify({\r\n                    time: 2500,\r\n                    title: 'Error',\r\n                    text: err.message,\r\n                    iconPack: 'feather',\r\n                    icon: 'icon-alert-circle',\r\n                    color: 'danger'\r\n                });\r\n            })\r\n    },\r\n\r\n    // Google Login\r\n    loginWithGoogle({commit, state}, payload) {\r\n        if (state.isUserLoggedIn()) {\r\n            payload.notify({\r\n                title: 'Login Attempt',\r\n                text: 'You are already logged in!',\r\n                iconPack: 'feather',\r\n                icon: 'icon-alert-circle',\r\n                color: 'warning'\r\n            });\r\n            return false\r\n        }\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n        firebase.auth().signInWithPopup(provider)\r\n            .then((result) => {\r\n                router.push(router.currentRoute.query.to || '/');\r\n                commit('UPDATE_AUTHENTICATED_USER', result.user.providerData[0])\r\n            }).catch((err) => {\r\n                payload.notify({\r\n                    time: 2500,\r\n                    title: 'Error',\r\n                    text: err.message,\r\n                    iconPack: 'feather',\r\n                    icon: 'icon-alert-circle',\r\n                    color: 'danger'\r\n                });\r\n            })\r\n        // firebase.auth().onAuthStateChanged(function(user) {\r\n        //     if (user) {\r\n        //         user.updateProfile({\r\n        //             roles: ['admin'],\r\n        //         }).then(function() {\r\n        //             this.$vs.notify({\r\n        //                 title: 'Success',\r\n        //                 text: \"done\",\r\n        //                 iconPack: 'feather',\r\n        //                 icon: 'icon-check',\r\n        //                 color: 'success'\r\n        //             });\r\n        //         }, function(error) {\r\n        //             this.$vs.notify({\r\n        //                 title: 'Error',\r\n        //                 text: error.message,\r\n        //                 iconPack: 'feather',\r\n        //                 icon: 'icon-alert-circle',\r\n        //                 color: 'danger'\r\n        //             });\r\n        //         });\r\n\r\n        //     }\r\n        // });\r\n    },\r\n\r\n    // Facebook Login\r\n    loginWithFacebook({commit, state}, payload) {\r\n        if (state.isUserLoggedIn()) {\r\n            payload.notify({\r\n                title: 'Login Attempt',\r\n                text: 'You are already logged in!',\r\n                iconPack: 'feather',\r\n                icon: 'icon-alert-circle',\r\n                color: 'warning'\r\n            });\r\n            return false\r\n        }\r\n        const provider = new firebase.auth.FacebookAuthProvider();\r\n\r\n        firebase.auth().signInWithPopup(provider)\r\n            .then((result) => {\r\n                router.push(router.currentRoute.query.to || '/');\r\n                commit('UPDATE_AUTHENTICATED_USER', result.user.providerData[0])\r\n            }).catch((err) => {\r\n                payload.notify({\r\n                    time: 2500,\r\n                    title: 'Error',\r\n                    text: err.message,\r\n                    iconPack: 'feather',\r\n                    icon: 'icon-alert-circle',\r\n                    color: 'danger'\r\n                });\r\n            })\r\n    },\r\n\r\n    // Twitter Login\r\n    loginWithTwitter({commit, state}, payload) {\r\n        if (state.isUserLoggedIn()) {\r\n            payload.notify({\r\n                title: 'Login Attempt',\r\n                text: 'You are already logged in!',\r\n                iconPack: 'feather',\r\n                icon: 'icon-alert-circle',\r\n                color: 'warning'\r\n            });\r\n            return false\r\n        }\r\n        const provider = new firebase.auth.TwitterAuthProvider();\r\n\r\n        firebase.auth().signInWithPopup(provider)\r\n            .then((result) => {\r\n                router.push(router.currentRoute.query.to || '/');\r\n                commit('UPDATE_AUTHENTICATED_USER', result.user.providerData[0])\r\n            }).catch((err) => {\r\n                payload.notify({\r\n                    time: 2500,\r\n                    title: 'Error',\r\n                    text: err.message,\r\n                    iconPack: 'feather',\r\n                    icon: 'icon-alert-circle',\r\n                    color: 'danger'\r\n                });\r\n            })\r\n    },\r\n\r\n    // Github Login\r\n    loginWithGithub({commit, state}, payload) {\r\n        if (state.isUserLoggedIn()) {\r\n            payload.notify({\r\n                title: 'Login Attempt',\r\n                text: 'You are already logged in!',\r\n                iconPack: 'feather',\r\n                icon: 'icon-alert-circle',\r\n                color: 'warning'\r\n            });\r\n            return false\r\n        }\r\n        const provider = new firebase.auth.GithubAuthProvider();\r\n\r\n        firebase.auth().signInWithPopup(provider)\r\n            .then((result) => {\r\n                router.push(router.currentRoute.query.to || '/');\r\n                commit('UPDATE_AUTHENTICATED_USER', result.user.providerData[0])\r\n            }).catch((err) => {\r\n                payload.notify({\r\n                    time: 2500,\r\n                    title: 'Error',\r\n                    text: err.message,\r\n                    iconPack: 'feather',\r\n                    icon: 'icon-alert-circle',\r\n                    color: 'danger'\r\n                });\r\n            })\r\n    },\r\n    registerUser({dispatch}, payload) {\r\n\r\n        // create user using firebase\r\n        firebase.auth().createUserWithEmailAndPassword(payload.userDetails.email, payload.userDetails.password)\r\n            .then(() => {\r\n                payload.notify({\r\n                    title: 'Account Created',\r\n                    text: 'You are successfully registered!',\r\n                    iconPack: 'feather',\r\n                    icon: 'icon-check',\r\n                    color: 'success'\r\n                });\r\n\r\n                const newPayload = {\r\n                    userDetails: payload.userDetails,\r\n                    notify: payload.notify,\r\n                    updateUsername: true\r\n                }\r\n                dispatch('login', newPayload)\r\n            }, (error) => {\r\n                payload.notify({\r\n                    title: 'Error',\r\n                    text: error.message,\r\n                    iconPack: 'feather',\r\n                    icon: 'icon-alert-circle',\r\n                    color: 'danger'\r\n                });\r\n            })\r\n    },\r\n    updateUsername({ commit }, payload) {\r\n        payload.user.updateProfile({\r\n            displayName: payload.username\r\n        }).then(() => {\r\n\r\n            // If username update is success\r\n              // update in localstorage\r\n            let newUserData = Object.assign({}, payload.user.providerData[0])\r\n            newUserData.displayName = payload.username\r\n            commit('UPDATE_AUTHENTICATED_USER', newUserData)\r\n\r\n            // If reload is required to get fresh data after update\r\n              // Reload current page\r\n            if(payload.isReloadRequired) {\r\n                router.push(router.currentRoute.query.to || '/')\r\n            }\r\n        }).catch((err) => {\r\n              payload.notify({\r\n                time: 8800,\r\n                title: 'Error',\r\n                text: err.message,\r\n                iconPack: 'feather',\r\n                icon: 'icon-alert-circle',\r\n                color: 'danger'\r\n            });\r\n        })\r\n    },\r\n    updateAuthenticatedUser({ commit }, payload) {\r\n        commit('UPDATE_AUTHENTICATED_USER', payload)\r\n    }\r\n}\r\n"]}]}